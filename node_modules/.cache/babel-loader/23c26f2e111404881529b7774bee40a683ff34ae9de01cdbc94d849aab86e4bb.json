{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRows = exports.rowsStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _isObjectEmpty = require(\"@mui/x-internals/isObjectEmpty\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridRowsSelector = require(\"./gridRowsSelector\");\nvar _gridPropsSelectors = require(\"../../core/gridPropsSelectors\");\nvar _useTimeout = require(\"../../utils/useTimeout\");\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _gridSortingSelector = require(\"../sorting/gridSortingSelector\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _pivoting = require(\"../pivoting\");\nconst rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.dataSource;\n  apiRef.current.caches.rows = (0, _gridRowsUtils.createRowsInternalCache)({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return (0, _extends2.default)({}, state, {\n    rows: (0, _gridRowsUtils.getRowsStateFromCache)({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexports.rowsStateInitializer = rowsStateInitializer;\nconst useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridRows');\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = (0, _useTimeout.useTimeout)();\n  const getRow = React.useCallback(id => {\n    const model = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (node && (0, _gridRowsUtils.isAutogeneratedRowNode)(node)) {\n      return {\n        [_gridRowsUtils.GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowId = React.useCallback(row => (0, _gridPropsSelectors.gridRowIdSelector)(apiRef, row), [apiRef]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        rows: (0, _gridRowsUtils.getRowsStateFromCache)({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: (0, _gridRowsSelector.gridRowTreeSelector)(apiRef),\n          previousTreeDepths: (0, _gridRowsSelector.gridRowTreeDepthsSelector)(apiRef),\n          previousGroupsToFetch: (0, _gridRowsSelector.gridRowGroupsToFetchSelector)(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotRows(rows, false);\n      return;\n    }\n    const cache = (0, _gridRowsUtils.createRowsInternalCache)({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === _signature.GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotRows(updates);\n      return;\n    }\n    const nonPinnedRowsUpdates = (0, _gridRowsUtils.computeRowsUpdates)(apiRef, updates, props.getRowId);\n    const cache = (0, _gridRowsUtils.updateCacheWithNewRows)({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateNestedRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = (0, _gridRowsUtils.computeRowsUpdates)(apiRef, updates, props.getRowId);\n    const cache = (0, _gridRowsUtils.updateCacheWithNewRows)({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      rows: (0, _extends2.default)({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef);\n    const idRowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => (0, _gridRowsSelector.gridRowCountSelector)(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => {\n    const {\n      rowIdToIndexMap\n    } = (0, _useGridVisibleRows.getVisibleRows)(apiRef);\n    return rowIdToIndexMap.get(id);\n  }, [apiRef]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = (0, _extends2.default)({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, {\n          tree: (0, _extends2.default)({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id) ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = (0, _gridRowsSelector.gridRowTreeSelector)(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = (0, _gridSortingSelector.gridSortedRowIdsSelector)(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !(0, _gridRowsUtils.isAutogeneratedRowNode)(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = (0, _gridRowsUtils.getTreeNodeDescendants)(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = (0, _gridFilterSelector.gridFilteredRowsLookupSelector)(apiRef);\n      children = (0, _isObjectEmpty.isObjectEmpty)(filteredRowsLookup) ? children : children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== _gridRowsUtils.GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = (0, _gridRowsSelector.gridRowTreeSelector)(apiRef)[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, {\n          tree: (0, _extends2.default)({}, state.rows.tree, {\n            [_gridRowsUtils.GRID_ROOT_GROUP_ID]: (0, _extends2.default)({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === _signature.GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = (0, _gridRowsSelector.gridRowMaximumTreeDepthSelector)(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = (0, _extends2.default)({}, (0, _gridRowsSelector.gridRowTreeSelector)(apiRef));\n    const dataRowIdToModelLookup = (0, _extends2.default)({}, (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef));\n    const rootGroup = tree[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = (0, _gridRowsUtils.getRowIdFromRowModel)(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[_gridRowsUtils.GRID_ROOT_GROUP_ID] = (0, _extends2.default)({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      rows: (0, _extends2.default)({}, state.rows, {\n        loading: props.loading,\n        totalRowCount: Math.max(props.rowCount || 0, rootGroupChildren.length),\n        dataRowIdToModelLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId, props.loading, props.rowCount]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateNestedRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = (0, _extends2.default)({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = (0, _gridRowsUtils.createRowsInternalCache)({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const previousDataSource = (0, _useLazyRef.default)(() => props.dataSource);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (props.dataSource && props.dataSource !== previousDataSource.current) {\n      previousDataSource.current = props.dataSource;\n      return;\n    }\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows, previousDataSource, props.dataSource]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy(_strategyProcessing.GridStrategyGroup.RowTree) !== (0, _gridRowsSelector.gridRowGroupingNameSelector)(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: (0, _gridRowsSelector.gridRowTreeSelector)(apiRef),\n        treeDepths: (0, _gridRowsSelector.gridRowTreeDepthsSelector)(apiRef),\n        dataRowIds: (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef),\n        dataRowIdToModelLookup: (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef)\n      });\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, response, {\n          totalTopLevelRowCount: (0, _gridRowsUtils.getTopLevelRowCount)({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.rowCount]);\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowProApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const currentRows = props.dataSource ? (0, _gridRowsSelector.gridDataRowsSelector)(apiRef) : props.rows;\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === currentRows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n          rows: (0, _extends2.default)({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n          rows: (0, _extends2.default)({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${currentRows?.length}`);\n    throttledRowsChange({\n      cache: (0, _gridRowsUtils.createRowsInternalCache)({\n        rows: currentRows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, props.dataSource, logger, throttledRowsChange, apiRef]);\n};\nexports.useGridRows = useGridRows;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridRows","rowsStateInitializer","_extends2","React","_useLazyRef","_isObjectEmpty","_useGridApiMethod","_useGridLogger","_gridRowsSelector","_gridPropsSelectors","_useTimeout","_signature","_useGridEvent","_useGridVisibleRows","_gridSortingSelector","_gridFilterSelector","_gridRowsUtils","_pipeProcessing","_strategyProcessing","_pivoting","state","props","apiRef","isDataSourceAvailable","dataSource","current","caches","rows","createRowsInternalCache","getRowId","loading","rowCount","getRowsStateFromCache","rowCountProp","loadingProp","previousTree","previousTreeDepths","process","env","NODE_ENV","freeze","error","logger","useGridLogger","lastUpdateMs","useRef","Date","now","lastRowCount","timeout","useTimeout","getRow","useCallback","id","model","gridRowsLookupSelector","node","gridRowNodeSelector","isAutogeneratedRowNode","GRID_ID_AUTOGENERATED","row","gridRowIdSelector","throttledRowsChange","cache","throttle","run","setState","gridRowTreeSelector","gridRowTreeDepthsSelector","previousGroupsToFetch","gridRowGroupsToFetchSelector","publishEvent","clear","throttleRemainingTimeMs","throttleRowsMs","start","setRows","debug","length","gridPivotActiveSelector","updateNonPivotRows","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","GridSignature","DataGrid","Error","join","nonPinnedRowsUpdates","computeRowsUpdates","updateCacheWithNewRows","previousCache","updateNestedRows","groupKeys","setLoading","loadingPropBeforePartialUpdates","getRowModels","dataRows","gridDataRowIdsSelector","idRowsLookup","Map","map","getRowsCount","gridRowCountSelector","getAllRowIds","getRowIndexRelativeToVisibleRows","rowIdToIndexMap","getVisibleRows","get","setRowChildrenExpansion","isExpanded","currentNode","type","newNode","childrenExpanded","tree","getRowNode","getRowGroupChildren","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","gridSortedRowIdsSelector","startIndex","findIndex","index","depth","push","getTreeNodeDescendants","filteredRowsLookup","gridFilteredRowsLookupSelector","isObjectEmpty","filter","childId","setRowIndex","rowId","targetIndex","parent","GRID_ROOT_GROUP_ID","group","allRows","oldIndex","updatedRows","splice","replaceRows","firstRowToRender","newRows","treeDepth","gridRowMaximumTreeDepthSelector","dataRowIdToModelLookup","rootGroup","rootGroupChildren","seenIds","Set","i","rowModel","getRowIdFromRowModel","removedRowId","has","rowTreeNodeConfig","groupingKey","add","dataRowIds","totalRowCount","Math","max","rowApi","unstable_replaceRows","rowProApi","rowProPrivateApi","groupRows","info","previousDataSource","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","GridStrategyGroup","RowTree","gridRowGroupingNameSelector","useGridEvent","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","getTopLevelRowCount","useGridRegisterPipeApplier","useGridApiMethod","isFirstRender","useEffect","isRowCountPropUpdated","currentRows","gridDataRowsSelector","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRows = exports.rowsStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _isObjectEmpty = require(\"@mui/x-internals/isObjectEmpty\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridRowsSelector = require(\"./gridRowsSelector\");\nvar _gridPropsSelectors = require(\"../../core/gridPropsSelectors\");\nvar _useTimeout = require(\"../../utils/useTimeout\");\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _gridSortingSelector = require(\"../sorting/gridSortingSelector\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _pivoting = require(\"../pivoting\");\nconst rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.dataSource;\n  apiRef.current.caches.rows = (0, _gridRowsUtils.createRowsInternalCache)({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return (0, _extends2.default)({}, state, {\n    rows: (0, _gridRowsUtils.getRowsStateFromCache)({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexports.rowsStateInitializer = rowsStateInitializer;\nconst useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridRows');\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = (0, _useTimeout.useTimeout)();\n  const getRow = React.useCallback(id => {\n    const model = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (node && (0, _gridRowsUtils.isAutogeneratedRowNode)(node)) {\n      return {\n        [_gridRowsUtils.GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowId = React.useCallback(row => (0, _gridPropsSelectors.gridRowIdSelector)(apiRef, row), [apiRef]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        rows: (0, _gridRowsUtils.getRowsStateFromCache)({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: (0, _gridRowsSelector.gridRowTreeSelector)(apiRef),\n          previousTreeDepths: (0, _gridRowsSelector.gridRowTreeDepthsSelector)(apiRef),\n          previousGroupsToFetch: (0, _gridRowsSelector.gridRowGroupsToFetchSelector)(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotRows(rows, false);\n      return;\n    }\n    const cache = (0, _gridRowsUtils.createRowsInternalCache)({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === _signature.GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotRows(updates);\n      return;\n    }\n    const nonPinnedRowsUpdates = (0, _gridRowsUtils.computeRowsUpdates)(apiRef, updates, props.getRowId);\n    const cache = (0, _gridRowsUtils.updateCacheWithNewRows)({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateNestedRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = (0, _gridRowsUtils.computeRowsUpdates)(apiRef, updates, props.getRowId);\n    const cache = (0, _gridRowsUtils.updateCacheWithNewRows)({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      rows: (0, _extends2.default)({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef);\n    const idRowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => (0, _gridRowsSelector.gridRowCountSelector)(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => {\n    const {\n      rowIdToIndexMap\n    } = (0, _useGridVisibleRows.getVisibleRows)(apiRef);\n    return rowIdToIndexMap.get(id);\n  }, [apiRef]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = (0, _extends2.default)({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, {\n          tree: (0, _extends2.default)({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id) ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = (0, _gridRowsSelector.gridRowTreeSelector)(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = (0, _gridSortingSelector.gridSortedRowIdsSelector)(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !(0, _gridRowsUtils.isAutogeneratedRowNode)(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = (0, _gridRowsUtils.getTreeNodeDescendants)(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = (0, _gridFilterSelector.gridFilteredRowsLookupSelector)(apiRef);\n      children = (0, _isObjectEmpty.isObjectEmpty)(filteredRowsLookup) ? children : children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== _gridRowsUtils.GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = (0, _gridRowsSelector.gridRowTreeSelector)(apiRef)[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, {\n          tree: (0, _extends2.default)({}, state.rows.tree, {\n            [_gridRowsUtils.GRID_ROOT_GROUP_ID]: (0, _extends2.default)({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === _signature.GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = (0, _gridRowsSelector.gridRowMaximumTreeDepthSelector)(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = (0, _extends2.default)({}, (0, _gridRowsSelector.gridRowTreeSelector)(apiRef));\n    const dataRowIdToModelLookup = (0, _extends2.default)({}, (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef));\n    const rootGroup = tree[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = (0, _gridRowsUtils.getRowIdFromRowModel)(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[_gridRowsUtils.GRID_ROOT_GROUP_ID] = (0, _extends2.default)({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      rows: (0, _extends2.default)({}, state.rows, {\n        loading: props.loading,\n        totalRowCount: Math.max(props.rowCount || 0, rootGroupChildren.length),\n        dataRowIdToModelLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId, props.loading, props.rowCount]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateNestedRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = (0, _extends2.default)({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = (0, _gridRowsUtils.createRowsInternalCache)({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const previousDataSource = (0, _useLazyRef.default)(() => props.dataSource);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (props.dataSource && props.dataSource !== previousDataSource.current) {\n      previousDataSource.current = props.dataSource;\n      return;\n    }\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows, previousDataSource, props.dataSource]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy(_strategyProcessing.GridStrategyGroup.RowTree) !== (0, _gridRowsSelector.gridRowGroupingNameSelector)(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: (0, _gridRowsSelector.gridRowTreeSelector)(apiRef),\n        treeDepths: (0, _gridRowsSelector.gridRowTreeDepthsSelector)(apiRef),\n        dataRowIds: (0, _gridRowsSelector.gridDataRowIdsSelector)(apiRef),\n        dataRowIdToModelLookup: (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef)\n      });\n      return (0, _extends2.default)({}, state, {\n        rows: (0, _extends2.default)({}, state.rows, response, {\n          totalTopLevelRowCount: (0, _gridRowsUtils.getTopLevelRowCount)({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.rowCount]);\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowProApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const currentRows = props.dataSource ? (0, _gridRowsSelector.gridDataRowsSelector)(apiRef) : props.rows;\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === currentRows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n          rows: (0, _extends2.default)({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n          rows: (0, _extends2.default)({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${currentRows?.length}`);\n    throttledRowsChange({\n      cache: (0, _gridRowsUtils.createRowsInternalCache)({\n        rows: currentRows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, props.dataSource, logger, throttledRowsChange, apiRef]);\n};\nexports.useGridRows = useGridRows;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}