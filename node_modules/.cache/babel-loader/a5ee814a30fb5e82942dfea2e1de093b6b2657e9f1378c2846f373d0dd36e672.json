{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCellExitEditModeKeys = exports.isCellEnterEditModeKeys = exports.isCellEditCommitKeys = exports.GRID_MULTIPLE_SELECTION_KEYS = exports.GRID_CELL_EXIT_EDIT_MODE_KEYS = exports.GRID_CELL_EDIT_COMMIT_KEYS = void 0;\nexports.isCopyShortcut = isCopyShortcut;\nexports.isNavigationKey = exports.isMultipleKey = exports.isKeyboardEvent = exports.isHideMenuKey = void 0;\nexports.isPasteShortcut = isPasteShortcut;\nexports.isPrintableKey = isPrintableKey;\n// Non printable keys have a name, for example \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// So event.key.length === 1 is often enough.\n//\n// However, we also need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nfunction isPrintableKey(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\nconst GRID_MULTIPLE_SELECTION_KEYS = exports.GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nconst GRID_CELL_EXIT_EDIT_MODE_KEYS = exports.GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nconst GRID_CELL_EDIT_COMMIT_KEYS = exports.GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nconst isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexports.isMultipleKey = isMultipleKey;\nconst isCellEnterEditModeKeys = event => isPrintableKey(event) || event.key === 'Enter' || event.key === 'Backspace' || event.key === 'Delete';\nexports.isCellEnterEditModeKeys = isCellEnterEditModeKeys;\nconst isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexports.isCellExitEditModeKeys = isCellExitEditModeKeys;\nconst isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexports.isCellEditCommitKeys = isCellEditCommitKeys;\nconst isNavigationKey = key => key.indexOf('Arrow') === 0 || key.indexOf('Page') === 0 || key === ' ' || key === 'Home' || key === 'End';\nexports.isNavigationKey = isNavigationKey;\nconst isKeyboardEvent = event => !!event.key;\nexports.isKeyboardEvent = isKeyboardEvent;\nconst isHideMenuKey = key => key === 'Tab' || key === 'Escape';\n\n// In theory, on macOS, ctrl + v doesn't trigger a paste, so the function should return false.\n// However, maybe it's overkill to fix, so let's be lazy.\nexports.isHideMenuKey = isHideMenuKey;\nfunction isPasteShortcut(event) {\n  return (event.ctrlKey || event.metaKey) &&\n  // We can't use event.code === 'KeyV' as event.code assumes a QWERTY keyboard layout,\n  // for example, it would be another letter on a Dvorak physical keyboard.\n  // We can't use event.key === 'v' as event.key is not stable with key modifiers and keyboard layouts,\n  // for example, it would be ה on a Hebrew keyboard layout.\n  // https://github.com/w3c/uievents/issues/377 could be a long-term solution\n  String.fromCharCode(event.keyCode) === 'V' && !event.shiftKey && !event.altKey;\n}\n\n// Checks if the keyboard event corresponds to the copy shortcut (CTRL+C or CMD+C) across different localization keyboards.\nfunction isCopyShortcut(event) {\n  return (event.ctrlKey || event.metaKey) && String.fromCharCode(event.keyCode) === 'C' && !event.shiftKey && !event.altKey;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","isCellExitEditModeKeys","isCellEnterEditModeKeys","isCellEditCommitKeys","GRID_MULTIPLE_SELECTION_KEYS","GRID_CELL_EXIT_EDIT_MODE_KEYS","GRID_CELL_EDIT_COMMIT_KEYS","isCopyShortcut","isNavigationKey","isMultipleKey","isKeyboardEvent","isHideMenuKey","isPasteShortcut","isPrintableKey","event","key","length","ctrlKey","metaKey","indexOf","String","fromCharCode","keyCode","shiftKey","altKey"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/utils/keyboardUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCellExitEditModeKeys = exports.isCellEnterEditModeKeys = exports.isCellEditCommitKeys = exports.GRID_MULTIPLE_SELECTION_KEYS = exports.GRID_CELL_EXIT_EDIT_MODE_KEYS = exports.GRID_CELL_EDIT_COMMIT_KEYS = void 0;\nexports.isCopyShortcut = isCopyShortcut;\nexports.isNavigationKey = exports.isMultipleKey = exports.isKeyboardEvent = exports.isHideMenuKey = void 0;\nexports.isPasteShortcut = isPasteShortcut;\nexports.isPrintableKey = isPrintableKey;\n// Non printable keys have a name, for example \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// So event.key.length === 1 is often enough.\n//\n// However, we also need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\nfunction isPrintableKey(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\nconst GRID_MULTIPLE_SELECTION_KEYS = exports.GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nconst GRID_CELL_EXIT_EDIT_MODE_KEYS = exports.GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nconst GRID_CELL_EDIT_COMMIT_KEYS = exports.GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nconst isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexports.isMultipleKey = isMultipleKey;\nconst isCellEnterEditModeKeys = event => isPrintableKey(event) || event.key === 'Enter' || event.key === 'Backspace' || event.key === 'Delete';\nexports.isCellEnterEditModeKeys = isCellEnterEditModeKeys;\nconst isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexports.isCellExitEditModeKeys = isCellExitEditModeKeys;\nconst isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexports.isCellEditCommitKeys = isCellEditCommitKeys;\nconst isNavigationKey = key => key.indexOf('Arrow') === 0 || key.indexOf('Page') === 0 || key === ' ' || key === 'Home' || key === 'End';\nexports.isNavigationKey = isNavigationKey;\nconst isKeyboardEvent = event => !!event.key;\nexports.isKeyboardEvent = isKeyboardEvent;\nconst isHideMenuKey = key => key === 'Tab' || key === 'Escape';\n\n// In theory, on macOS, ctrl + v doesn't trigger a paste, so the function should return false.\n// However, maybe it's overkill to fix, so let's be lazy.\nexports.isHideMenuKey = isHideMenuKey;\nfunction isPasteShortcut(event) {\n  return (event.ctrlKey || event.metaKey) &&\n  // We can't use event.code === 'KeyV' as event.code assumes a QWERTY keyboard layout,\n  // for example, it would be another letter on a Dvorak physical keyboard.\n  // We can't use event.key === 'v' as event.key is not stable with key modifiers and keyboard layouts,\n  // for example, it would be ה on a Hebrew keyboard layout.\n  // https://github.com/w3c/uievents/issues/377 could be a long-term solution\n  String.fromCharCode(event.keyCode) === 'V' && !event.shiftKey && !event.altKey;\n}\n\n// Checks if the keyboard event corresponds to the copy shortcut (CTRL+C or CMD+C) across different localization keyboards.\nfunction isCopyShortcut(event) {\n  return (event.ctrlKey || event.metaKey) && String.fromCharCode(event.keyCode) === 'C' && !event.shiftKey && !event.altKey;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,uBAAuB,GAAGH,OAAO,CAACI,oBAAoB,GAAGJ,OAAO,CAACK,4BAA4B,GAAGL,OAAO,CAACM,6BAA6B,GAAGN,OAAO,CAACO,0BAA0B,GAAG,KAAK,CAAC;AAC5NP,OAAO,CAACQ,cAAc,GAAGA,cAAc;AACvCR,OAAO,CAACS,eAAe,GAAGT,OAAO,CAACU,aAAa,GAAGV,OAAO,CAACW,eAAe,GAAGX,OAAO,CAACY,aAAa,GAAG,KAAK,CAAC;AAC1GZ,OAAO,CAACa,eAAe,GAAGA,eAAe;AACzCb,OAAO,CAACc,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAcA,CAACC,KAAK,EAAE;EAC7B,OAAOA,KAAK,CAACC,GAAG,CAACC,MAAM,KAAK,CAAC,IAAI,CAACF,KAAK,CAACG,OAAO,IAAI,CAACH,KAAK,CAACI,OAAO;AACnE;AACA,MAAMd,4BAA4B,GAAGL,OAAO,CAACK,4BAA4B,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AACxG,MAAMC,6BAA6B,GAAGN,OAAO,CAACM,6BAA6B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AACxG,MAAMC,0BAA0B,GAAGP,OAAO,CAACO,0BAA0B,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;AACxF,MAAMG,aAAa,GAAGM,GAAG,IAAIX,4BAA4B,CAACe,OAAO,CAACJ,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3EhB,OAAO,CAACU,aAAa,GAAGA,aAAa;AACrC,MAAMP,uBAAuB,GAAGY,KAAK,IAAID,cAAc,CAACC,KAAK,CAAC,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,IAAID,KAAK,CAACC,GAAG,KAAK,WAAW,IAAID,KAAK,CAACC,GAAG,KAAK,QAAQ;AAC9IhB,OAAO,CAACG,uBAAuB,GAAGA,uBAAuB;AACzD,MAAMD,sBAAsB,GAAGc,GAAG,IAAIV,6BAA6B,CAACc,OAAO,CAACJ,GAAG,CAAC,GAAG,CAAC,CAAC;AACrFhB,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB;AACvD,MAAME,oBAAoB,GAAGY,GAAG,IAAIT,0BAA0B,CAACa,OAAO,CAACJ,GAAG,CAAC,GAAG,CAAC,CAAC;AAChFhB,OAAO,CAACI,oBAAoB,GAAGA,oBAAoB;AACnD,MAAMK,eAAe,GAAGO,GAAG,IAAIA,GAAG,CAACI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAIJ,GAAG,CAACI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAIJ,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,KAAK;AACxIhB,OAAO,CAACS,eAAe,GAAGA,eAAe;AACzC,MAAME,eAAe,GAAGI,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,GAAG;AAC5ChB,OAAO,CAACW,eAAe,GAAGA,eAAe;AACzC,MAAMC,aAAa,GAAGI,GAAG,IAAIA,GAAG,KAAK,KAAK,IAAIA,GAAG,KAAK,QAAQ;;AAE9D;AACA;AACAhB,OAAO,CAACY,aAAa,GAAGA,aAAa;AACrC,SAASC,eAAeA,CAACE,KAAK,EAAE;EAC9B,OAAO,CAACA,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACI,OAAO;EACtC;EACA;EACA;EACA;EACA;EACAE,MAAM,CAACC,YAAY,CAACP,KAAK,CAACQ,OAAO,CAAC,KAAK,GAAG,IAAI,CAACR,KAAK,CAACS,QAAQ,IAAI,CAACT,KAAK,CAACU,MAAM;AAChF;;AAEA;AACA,SAASjB,cAAcA,CAACO,KAAK,EAAE;EAC7B,OAAO,CAACA,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACI,OAAO,KAAKE,MAAM,CAACC,YAAY,CAACP,KAAK,CAACQ,OAAO,CAAC,KAAK,GAAG,IAAI,CAACR,KAAK,CAACS,QAAQ,IAAI,CAACT,KAAK,CAACU,MAAM;AAC3H","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}