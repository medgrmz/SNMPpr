{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowSelection = exports.rowSelectionStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _gridRowSelectionSelector = require(\"./gridRowSelectionSelector\");\nvar _gridFocusStateSelector = require(\"../focus/gridFocusStateSelector\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _colDef = require(\"../../../colDef\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _constants = require(\"../../../internals/constants\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _utils = require(\"./utils\");\nvar _gridRowSelectionManager = require(\"../../../models/gridRowSelectionManager\");\nvar _pagination = require(\"../pagination\");\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nconst rowSelectionStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexports.rowSelectionStateInitializer = rowSelectionStateInitializer;\nconst useGridRowSelection = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== _signature.GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: _gridRowSelectionSelector.gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = (0, _utils.isMultipleRowSelectionEnabled)(props);\n  const tree = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridRowTreeSelector);\n  const isNestedData = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = (0, _useEventCallback.default)(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? (0, _pagination.gridPaginatedVisibleSortedGridRowIdsSelector)(apiRef) : (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === _signature.GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }));\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = (0, _gridRowSelectionSelector.gridRowSelectionManagerSelector)(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => (0, _gridRowSelectionSelector.gridRowSelectionIdsSelector)(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selectionModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        (0, _utils.findRowsToDeselect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            (0, _utils.findRowsToDeselect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, selectionPublicApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, selectionPrivateApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n    const filteredRowsLookup = (0, _gridFilterSelector.gridFilteredRowsLookupSelector)(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowsLookup[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        continue;\n      }\n      const node = tree[id];\n      if (node?.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !(0, _keyboardUtils.isKeyboardEvent)(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = (0, _gridRowSelectionSelector.gridRowSelectionCountSelector)(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${_gridClasses.gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === _colDef.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === _constants.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === _colDef.GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const quickFilterModel = (0, _gridFilterSelector.gridQuickFilterValuesSelector)(apiRef);\n    const hasFilters = filterModel.items.length > 0 || (quickFilterModel?.length || 0) > 0;\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && applyAutoSelection && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      });\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, applyAutoSelection, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === _gridEditRowModel.GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if ((0, _domUtils.isEventTargetInPortal)(event)) {\n      return;\n    }\n    if ((0, _keyboardUtils.isNavigationKey)(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = (0, _gridFocusStateSelector.gridFocusCellSelector)(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = (0, _useGridVisibleRows.getVisibleRows)(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = (0, _useEventCallback.default)(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  (0, _useGridEvent.useGridEvent)(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};\nexports.useGridRowSelection = useGridRowSelection;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridRowSelection","rowSelectionStateInitializer","_extends2","React","_useEventCallback","_signature","_useGridEvent","_useGridApiMethod","_useGridLogger","_useGridSelector","_gridRowsSelector","_gridRowSelectionSelector","_gridFocusStateSelector","_gridFilterSelector","_colDef","_gridEditRowModel","_keyboardUtils","_useGridVisibleRows","_constants","_gridClasses","_domUtils","_utils","_gridRowSelectionManager","_pagination","emptyModel","type","ids","Set","state","props","rowSelection","rowSelectionModel","apiRef","logger","useGridLogger","runIfRowSelectionIsEnabled","useCallback","callback","args","applyAutoSelection","signature","GridSignature","DataGrid","rowSelectionPropagation","parents","descendants","propRowSelectionModel","useMemo","lastRowToggled","useRef","current","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","gridRowSelectionStateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","isMultipleRowSelectionEnabled","tree","useGridSelector","gridRowTreeSelector","isNestedData","gridRowMaximumTreeDepthSelector","expandMouseRowRangeSelection","id","endId","startId","isSelected","isRowSelected","visibleRowIds","gridExpandedSortedRowIdsSelector","startIndex","findIndex","rowId","endIndex","selectRowRange","getRowsToBeSelected","rowsToBeSelected","pagination","checkboxSelectionVisibleOnly","paginationMode","gridPaginatedVisibleSortedGridRowIdsSelector","setRowSelectionModel","model","size","Error","join","currentModel","debug","setState","selectionManager","gridRowSelectionManagerSelector","has","getRowParams","rowNode","gridRowNodeSelector","getSelectedRows","gridRowSelectionIdsSelector","selectRow","resetSelection","newSelectionModel","addRow","add","findRowsToSelect","selectionModel","createRowSelectionManager","unselect","select","removeRow","findRowsToDeselect","isSelectionValid","selectRows","selectableIds","i","length","currentSelectionModel","Array","from","every","getPropagatedRowSelectionModel","inputSelectionModel","propagatedSelectionModel","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","useGridApiMethod","isFirstRender","removeOutdatedSelection","sortModelUpdated","currentSelection","rowsLookup","gridRowsLookupSelector","filteredRowsLookup","gridFilteredRowsLookupSelector","isNonExistent","filterMode","hasChanged","keepNonExistentRowsSelected","node","isAutoGenerated","children","childId","shouldReapplyPropagation","unfilteredSelectedRowIds","selectedRowIds","push","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","isKeyboardEvent","selectedRowsCount","gridRowSelectionCountSelector","shouldStaySelected","newSelectionState","handleRowClick","params","field","target","closest","gridClasses","cell","getAttribute","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","column","getColumn","GRID_ACTIONS_COLUMN_TYPE","shiftKey","preventSelectionOnShift","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","toggleAllRows","filterModel","gridFilterModelSelector","quickFilterModel","gridQuickFilterValuesSelector","hasFilters","items","handleHeaderSelectionCheckboxChange","handleCellKeyDown","getCellMode","GridCellModes","Edit","isEventTargetInPortal","isNavigationKey","key","focusCell","gridFocusCellSelector","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","visibleRows","getVisibleRows","rows","String","fromCharCode","keyCode","syncControlledState","undefined","useGridEvent","useEffect","isStateControlled"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowSelection = exports.rowSelectionStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _gridRowSelectionSelector = require(\"./gridRowSelectionSelector\");\nvar _gridFocusStateSelector = require(\"../focus/gridFocusStateSelector\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _colDef = require(\"../../../colDef\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _constants = require(\"../../../internals/constants\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _utils = require(\"./utils\");\nvar _gridRowSelectionManager = require(\"../../../models/gridRowSelectionManager\");\nvar _pagination = require(\"../pagination\");\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nconst rowSelectionStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexports.rowSelectionStateInitializer = rowSelectionStateInitializer;\nconst useGridRowSelection = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== _signature.GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: _gridRowSelectionSelector.gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = (0, _utils.isMultipleRowSelectionEnabled)(props);\n  const tree = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridRowTreeSelector);\n  const isNestedData = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = (0, _useEventCallback.default)(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? (0, _pagination.gridPaginatedVisibleSortedGridRowIdsSelector)(apiRef) : (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === _signature.GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }));\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = (0, _gridRowSelectionSelector.gridRowSelectionManagerSelector)(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => (0, _gridRowSelectionSelector.gridRowSelectionIdsSelector)(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selectionModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        (0, _utils.findRowsToDeselect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            (0, _utils.findRowsToDeselect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      (0, _utils.findRowsToSelect)(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = (0, _gridFilterSelector.gridExpandedSortedRowIdsSelector)(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, selectionPublicApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, selectionPrivateApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n    const filteredRowsLookup = (0, _gridFilterSelector.gridFilteredRowsLookupSelector)(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowsLookup[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = (0, _gridRowSelectionManager.createRowSelectionManager)(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        continue;\n      }\n      const node = tree[id];\n      if (node?.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !(0, _keyboardUtils.isKeyboardEvent)(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = (0, _gridRowSelectionSelector.gridRowSelectionCountSelector)(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${_gridClasses.gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === _colDef.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === _constants.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === _colDef.GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = (0, _gridRowsSelector.gridRowNodeSelector)(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const quickFilterModel = (0, _gridFilterSelector.gridQuickFilterValuesSelector)(apiRef);\n    const hasFilters = filterModel.items.length > 0 || (quickFilterModel?.length || 0) > 0;\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && applyAutoSelection && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      });\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, applyAutoSelection, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === _gridEditRowModel.GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if ((0, _domUtils.isEventTargetInPortal)(event)) {\n      return;\n    }\n    if ((0, _keyboardUtils.isNavigationKey)(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = (0, _gridFocusStateSelector.gridFocusCellSelector)(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = (0, _useGridVisibleRows.getVisibleRows)(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = (0, _useEventCallback.default)(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  (0, _useGridEvent.useGridEvent)(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = (0, _gridRowSelectionSelector.gridRowSelectionStateSelector)(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};\nexports.useGridRowSelection = useGridRowSelection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}