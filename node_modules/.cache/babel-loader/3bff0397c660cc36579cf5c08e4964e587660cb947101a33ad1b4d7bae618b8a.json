{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildCSV = buildCSV;\nexports.serializeCellValue = void 0;\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _colDef = require(\"../../../../colDef\");\nfunction sanitizeCellValue(value, csvOptions) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  const valueStr = typeof value === 'string' ? value : `${value}`;\n  if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {\n    const escapedValue = valueStr.replace(/\"/g, '\"\"');\n    if (csvOptions.escapeFormulas) {\n      // See https://owasp.org/www-community/attacks/CSV_Injection\n      if (['=', '+', '-', '@', '\\t', '\\r'].includes(escapedValue[0])) {\n        return `\"'${escapedValue}\"`;\n      }\n    }\n    // Make sure value containing delimiter or line break won't be split into multiple cells\n    if ([csvOptions.delimiter, '\\n', '\\r', '\"'].some(delimiter => valueStr.includes(delimiter))) {\n      return `\"${escapedValue}\"`;\n    }\n    return escapedValue;\n  }\n  return valueStr;\n}\nconst serializeCellValue = (cellParams, options) => {\n  const {\n    csvOptions,\n    ignoreValueFormatter\n  } = options;\n  let value;\n  if (ignoreValueFormatter) {\n    const columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      value = cellParams.value?.toISOString();\n    } else if (typeof cellParams.value?.toString === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, csvOptions);\n};\nexports.serializeCellValue = serializeCellValue;\nclass CSVRow {\n  constructor(options) {\n    this.options = void 0;\n    this.rowString = '';\n    this.isEmpty = true;\n    this.options = options;\n  }\n  addValue(value) {\n    if (!this.isEmpty) {\n      this.rowString += this.options.csvOptions.delimiter;\n    }\n    if (typeof this.options.sanitizeCellValue === 'function') {\n      this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);\n    } else {\n      this.rowString += value;\n    }\n    this.isEmpty = false;\n  }\n  getRowString() {\n    return this.rowString;\n  }\n}\nconst serializeRow = ({\n  id,\n  columns,\n  getCellParams,\n  csvOptions,\n  ignoreValueFormatter\n}) => {\n  const row = new CSVRow({\n    csvOptions\n  });\n  columns.forEach(column => {\n    const cellParams = getCellParams(id, column.field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        (0, _warning.warnOnce)(['MUI X: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n      }\n    }\n    row.addValue(serializeCellValue(cellParams, {\n      ignoreValueFormatter,\n      csvOptions\n    }));\n  });\n  return row.getRowString();\n};\nfunction buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    csvOptions,\n    ignoreValueFormatter,\n    apiRef\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({\n    id,\n    columns,\n    getCellParams: apiRef.current.getCellParams,\n    ignoreValueFormatter,\n    csvOptions\n  })}\\r\\n`, '').trim();\n  if (!csvOptions.includeHeaders) {\n    return CSVBody;\n  }\n  const filteredColumns = columns.filter(column => column.field !== _colDef.GRID_CHECKBOX_SELECTION_COL_DEF.field);\n  const headerRows = [];\n  if (csvOptions.includeColumnGroupsHeaders) {\n    const columnGroupLookup = apiRef.current.getAllGroupDetails();\n    let maxColumnGroupsDepth = 0;\n    const columnGroupPathsLookup = filteredColumns.reduce((acc, column) => {\n      const columnGroupPath = apiRef.current.getColumnGroupPath(column.field);\n      acc[column.field] = columnGroupPath;\n      maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);\n      return acc;\n    }, {});\n    for (let i = 0; i < maxColumnGroupsDepth; i += 1) {\n      const headerGroupRow = new CSVRow({\n        csvOptions,\n        sanitizeCellValue\n      });\n      headerRows.push(headerGroupRow);\n      filteredColumns.forEach(column => {\n        const columnGroupId = (columnGroupPathsLookup[column.field] || [])[i];\n        const columnGroup = columnGroupLookup[columnGroupId];\n        headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : '');\n      });\n    }\n  }\n  const mainHeaderRow = new CSVRow({\n    csvOptions,\n    sanitizeCellValue\n  });\n  filteredColumns.forEach(column => {\n    mainHeaderRow.addValue(column.headerName || column.field);\n  });\n  headerRows.push(mainHeaderRow);\n  const CSVHead = `${headerRows.map(row => row.getRowString()).join('\\r\\n')}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","buildCSV","serializeCellValue","_warning","require","_colDef","sanitizeCellValue","csvOptions","undefined","valueStr","shouldAppendQuotes","escapeFormulas","escapedValue","replace","includes","delimiter","some","cellParams","options","ignoreValueFormatter","columnType","colDef","type","String","toISOString","toString","formattedValue","CSVRow","constructor","rowString","isEmpty","addValue","getRowString","serializeRow","id","columns","getCellParams","row","forEach","column","field","process","env","NODE_ENV","warnOnce","rowIds","apiRef","CSVBody","reduce","acc","current","trim","includeHeaders","filteredColumns","filter","GRID_CHECKBOX_SELECTION_COL_DEF","headerRows","includeColumnGroupsHeaders","columnGroupLookup","getAllGroupDetails","maxColumnGroupsDepth","columnGroupPathsLookup","columnGroupPath","getColumnGroupPath","Math","max","length","i","headerGroupRow","push","columnGroupId","columnGroup","headerName","groupId","mainHeaderRow","CSVHead","map","join"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildCSV = buildCSV;\nexports.serializeCellValue = void 0;\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _colDef = require(\"../../../../colDef\");\nfunction sanitizeCellValue(value, csvOptions) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  const valueStr = typeof value === 'string' ? value : `${value}`;\n  if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {\n    const escapedValue = valueStr.replace(/\"/g, '\"\"');\n    if (csvOptions.escapeFormulas) {\n      // See https://owasp.org/www-community/attacks/CSV_Injection\n      if (['=', '+', '-', '@', '\\t', '\\r'].includes(escapedValue[0])) {\n        return `\"'${escapedValue}\"`;\n      }\n    }\n    // Make sure value containing delimiter or line break won't be split into multiple cells\n    if ([csvOptions.delimiter, '\\n', '\\r', '\"'].some(delimiter => valueStr.includes(delimiter))) {\n      return `\"${escapedValue}\"`;\n    }\n    return escapedValue;\n  }\n  return valueStr;\n}\nconst serializeCellValue = (cellParams, options) => {\n  const {\n    csvOptions,\n    ignoreValueFormatter\n  } = options;\n  let value;\n  if (ignoreValueFormatter) {\n    const columnType = cellParams.colDef.type;\n    if (columnType === 'number') {\n      value = String(cellParams.value);\n    } else if (columnType === 'date' || columnType === 'dateTime') {\n      value = cellParams.value?.toISOString();\n    } else if (typeof cellParams.value?.toString === 'function') {\n      value = cellParams.value.toString();\n    } else {\n      value = cellParams.value;\n    }\n  } else {\n    value = cellParams.formattedValue;\n  }\n  return sanitizeCellValue(value, csvOptions);\n};\nexports.serializeCellValue = serializeCellValue;\nclass CSVRow {\n  constructor(options) {\n    this.options = void 0;\n    this.rowString = '';\n    this.isEmpty = true;\n    this.options = options;\n  }\n  addValue(value) {\n    if (!this.isEmpty) {\n      this.rowString += this.options.csvOptions.delimiter;\n    }\n    if (typeof this.options.sanitizeCellValue === 'function') {\n      this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);\n    } else {\n      this.rowString += value;\n    }\n    this.isEmpty = false;\n  }\n  getRowString() {\n    return this.rowString;\n  }\n}\nconst serializeRow = ({\n  id,\n  columns,\n  getCellParams,\n  csvOptions,\n  ignoreValueFormatter\n}) => {\n  const row = new CSVRow({\n    csvOptions\n  });\n  columns.forEach(column => {\n    const cellParams = getCellParams(id, column.field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        (0, _warning.warnOnce)(['MUI X: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n      }\n    }\n    row.addValue(serializeCellValue(cellParams, {\n      ignoreValueFormatter,\n      csvOptions\n    }));\n  });\n  return row.getRowString();\n};\nfunction buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    csvOptions,\n    ignoreValueFormatter,\n    apiRef\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({\n    id,\n    columns,\n    getCellParams: apiRef.current.getCellParams,\n    ignoreValueFormatter,\n    csvOptions\n  })}\\r\\n`, '').trim();\n  if (!csvOptions.includeHeaders) {\n    return CSVBody;\n  }\n  const filteredColumns = columns.filter(column => column.field !== _colDef.GRID_CHECKBOX_SELECTION_COL_DEF.field);\n  const headerRows = [];\n  if (csvOptions.includeColumnGroupsHeaders) {\n    const columnGroupLookup = apiRef.current.getAllGroupDetails();\n    let maxColumnGroupsDepth = 0;\n    const columnGroupPathsLookup = filteredColumns.reduce((acc, column) => {\n      const columnGroupPath = apiRef.current.getColumnGroupPath(column.field);\n      acc[column.field] = columnGroupPath;\n      maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);\n      return acc;\n    }, {});\n    for (let i = 0; i < maxColumnGroupsDepth; i += 1) {\n      const headerGroupRow = new CSVRow({\n        csvOptions,\n        sanitizeCellValue\n      });\n      headerRows.push(headerGroupRow);\n      filteredColumns.forEach(column => {\n        const columnGroupId = (columnGroupPathsLookup[column.field] || [])[i];\n        const columnGroup = columnGroupLookup[columnGroupId];\n        headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : '');\n      });\n    }\n  }\n  const mainHeaderRow = new CSVRow({\n    csvOptions,\n    sanitizeCellValue\n  });\n  filteredColumns.forEach(column => {\n    mainHeaderRow.addValue(column.headerName || column.field);\n  });\n  headerRows.push(mainHeaderRow);\n  const CSVHead = `${headerRows.map(row => row.getRowString()).join('\\r\\n')}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAC3BF,OAAO,CAACG,kBAAkB,GAAG,KAAK,CAAC;AACnC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAClD,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,SAASE,iBAAiBA,CAACN,KAAK,EAAEO,UAAU,EAAE;EAC5C,IAAIP,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKQ,SAAS,EAAE;IACzC,OAAO,EAAE;EACX;EACA,MAAMC,QAAQ,GAAG,OAAOT,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,GAAGA,KAAK,EAAE;EAC/D,IAAIO,UAAU,CAACG,kBAAkB,IAAIH,UAAU,CAACI,cAAc,EAAE;IAC9D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACjD,IAAIN,UAAU,CAACI,cAAc,EAAE;MAC7B;MACA,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAACG,QAAQ,CAACF,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9D,OAAO,KAAKA,YAAY,GAAG;MAC7B;IACF;IACA;IACA,IAAI,CAACL,UAAU,CAACQ,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAACC,IAAI,CAACD,SAAS,IAAIN,QAAQ,CAACK,QAAQ,CAACC,SAAS,CAAC,CAAC,EAAE;MAC3F,OAAO,IAAIH,YAAY,GAAG;IAC5B;IACA,OAAOA,YAAY;EACrB;EACA,OAAOH,QAAQ;AACjB;AACA,MAAMP,kBAAkB,GAAGA,CAACe,UAAU,EAAEC,OAAO,KAAK;EAClD,MAAM;IACJX,UAAU;IACVY;EACF,CAAC,GAAGD,OAAO;EACX,IAAIlB,KAAK;EACT,IAAImB,oBAAoB,EAAE;IACxB,MAAMC,UAAU,GAAGH,UAAU,CAACI,MAAM,CAACC,IAAI;IACzC,IAAIF,UAAU,KAAK,QAAQ,EAAE;MAC3BpB,KAAK,GAAGuB,MAAM,CAACN,UAAU,CAACjB,KAAK,CAAC;IAClC,CAAC,MAAM,IAAIoB,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,UAAU,EAAE;MAC7DpB,KAAK,GAAGiB,UAAU,CAACjB,KAAK,EAAEwB,WAAW,CAAC,CAAC;IACzC,CAAC,MAAM,IAAI,OAAOP,UAAU,CAACjB,KAAK,EAAEyB,QAAQ,KAAK,UAAU,EAAE;MAC3DzB,KAAK,GAAGiB,UAAU,CAACjB,KAAK,CAACyB,QAAQ,CAAC,CAAC;IACrC,CAAC,MAAM;MACLzB,KAAK,GAAGiB,UAAU,CAACjB,KAAK;IAC1B;EACF,CAAC,MAAM;IACLA,KAAK,GAAGiB,UAAU,CAACS,cAAc;EACnC;EACA,OAAOpB,iBAAiB,CAACN,KAAK,EAAEO,UAAU,CAAC;AAC7C,CAAC;AACDR,OAAO,CAACG,kBAAkB,GAAGA,kBAAkB;AAC/C,MAAMyB,MAAM,CAAC;EACXC,WAAWA,CAACV,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACW,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACZ,OAAO,GAAGA,OAAO;EACxB;EACAa,QAAQA,CAAC/B,KAAK,EAAE;IACd,IAAI,CAAC,IAAI,CAAC8B,OAAO,EAAE;MACjB,IAAI,CAACD,SAAS,IAAI,IAAI,CAACX,OAAO,CAACX,UAAU,CAACQ,SAAS;IACrD;IACA,IAAI,OAAO,IAAI,CAACG,OAAO,CAACZ,iBAAiB,KAAK,UAAU,EAAE;MACxD,IAAI,CAACuB,SAAS,IAAI,IAAI,CAACX,OAAO,CAACZ,iBAAiB,CAACN,KAAK,EAAE,IAAI,CAACkB,OAAO,CAACX,UAAU,CAAC;IAClF,CAAC,MAAM;MACL,IAAI,CAACsB,SAAS,IAAI7B,KAAK;IACzB;IACA,IAAI,CAAC8B,OAAO,GAAG,KAAK;EACtB;EACAE,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACH,SAAS;EACvB;AACF;AACA,MAAMI,YAAY,GAAGA,CAAC;EACpBC,EAAE;EACFC,OAAO;EACPC,aAAa;EACb7B,UAAU;EACVY;AACF,CAAC,KAAK;EACJ,MAAMkB,GAAG,GAAG,IAAIV,MAAM,CAAC;IACrBpB;EACF,CAAC,CAAC;EACF4B,OAAO,CAACG,OAAO,CAACC,MAAM,IAAI;IACxB,MAAMtB,UAAU,GAAGmB,aAAa,CAACF,EAAE,EAAEK,MAAM,CAACC,KAAK,CAAC;IAClD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIpB,MAAM,CAACN,UAAU,CAACS,cAAc,CAAC,KAAK,iBAAiB,EAAE;QAC3D,CAAC,CAAC,EAAEvB,QAAQ,CAACyC,QAAQ,EAAE,CAAC,oIAAoI,EAAE,6EAA6E,CAAC,CAAC;MAC/O;IACF;IACAP,GAAG,CAACN,QAAQ,CAAC7B,kBAAkB,CAACe,UAAU,EAAE;MAC1CE,oBAAoB;MACpBZ;IACF,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;EACF,OAAO8B,GAAG,CAACL,YAAY,CAAC,CAAC;AAC3B,CAAC;AACD,SAAS/B,QAAQA,CAACiB,OAAO,EAAE;EACzB,MAAM;IACJiB,OAAO;IACPU,MAAM;IACNtC,UAAU;IACVY,oBAAoB;IACpB2B;EACF,CAAC,GAAG5B,OAAO;EACX,MAAM6B,OAAO,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEf,EAAE,KAAK,GAAGe,GAAG,GAAGhB,YAAY,CAAC;IAC/DC,EAAE;IACFC,OAAO;IACPC,aAAa,EAAEU,MAAM,CAACI,OAAO,CAACd,aAAa;IAC3CjB,oBAAoB;IACpBZ;EACF,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC4C,IAAI,CAAC,CAAC;EACpB,IAAI,CAAC5C,UAAU,CAAC6C,cAAc,EAAE;IAC9B,OAAOL,OAAO;EAChB;EACA,MAAMM,eAAe,GAAGlB,OAAO,CAACmB,MAAM,CAACf,MAAM,IAAIA,MAAM,CAACC,KAAK,KAAKnC,OAAO,CAACkD,+BAA+B,CAACf,KAAK,CAAC;EAChH,MAAMgB,UAAU,GAAG,EAAE;EACrB,IAAIjD,UAAU,CAACkD,0BAA0B,EAAE;IACzC,MAAMC,iBAAiB,GAAGZ,MAAM,CAACI,OAAO,CAACS,kBAAkB,CAAC,CAAC;IAC7D,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,MAAMC,sBAAsB,GAAGR,eAAe,CAACL,MAAM,CAAC,CAACC,GAAG,EAAEV,MAAM,KAAK;MACrE,MAAMuB,eAAe,GAAGhB,MAAM,CAACI,OAAO,CAACa,kBAAkB,CAACxB,MAAM,CAACC,KAAK,CAAC;MACvES,GAAG,CAACV,MAAM,CAACC,KAAK,CAAC,GAAGsB,eAAe;MACnCF,oBAAoB,GAAGI,IAAI,CAACC,GAAG,CAACL,oBAAoB,EAAEE,eAAe,CAACI,MAAM,CAAC;MAC7E,OAAOjB,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,oBAAoB,EAAEO,CAAC,IAAI,CAAC,EAAE;MAChD,MAAMC,cAAc,GAAG,IAAIzC,MAAM,CAAC;QAChCpB,UAAU;QACVD;MACF,CAAC,CAAC;MACFkD,UAAU,CAACa,IAAI,CAACD,cAAc,CAAC;MAC/Bf,eAAe,CAACf,OAAO,CAACC,MAAM,IAAI;QAChC,MAAM+B,aAAa,GAAG,CAACT,sBAAsB,CAACtB,MAAM,CAACC,KAAK,CAAC,IAAI,EAAE,EAAE2B,CAAC,CAAC;QACrE,MAAMI,WAAW,GAAGb,iBAAiB,CAACY,aAAa,CAAC;QACpDF,cAAc,CAACrC,QAAQ,CAACwC,WAAW,GAAGA,WAAW,CAACC,UAAU,IAAID,WAAW,CAACE,OAAO,GAAG,EAAE,CAAC;MAC3F,CAAC,CAAC;IACJ;EACF;EACA,MAAMC,aAAa,GAAG,IAAI/C,MAAM,CAAC;IAC/BpB,UAAU;IACVD;EACF,CAAC,CAAC;EACF+C,eAAe,CAACf,OAAO,CAACC,MAAM,IAAI;IAChCmC,aAAa,CAAC3C,QAAQ,CAACQ,MAAM,CAACiC,UAAU,IAAIjC,MAAM,CAACC,KAAK,CAAC;EAC3D,CAAC,CAAC;EACFgB,UAAU,CAACa,IAAI,CAACK,aAAa,CAAC;EAC9B,MAAMC,OAAO,GAAG,GAAGnB,UAAU,CAACoB,GAAG,CAACvC,GAAG,IAAIA,GAAG,CAACL,YAAY,CAAC,CAAC,CAAC,CAAC6C,IAAI,CAAC,MAAM,CAAC,MAAM;EAC/E,OAAO,GAAGF,OAAO,GAAG5B,OAAO,EAAE,CAACI,IAAI,CAAC,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}