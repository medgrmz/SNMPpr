{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridColumnResize = exports.columnResizeStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _ownerDocument = _interopRequireDefault(require(\"@mui/utils/ownerDocument\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _gridColumnResizeApi = require(\"./gridColumnResizeApi\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _utils = require(\"../../utils\");\nvar _virtualization = require(\"../virtualization\");\nvar _createControllablePromise = require(\"../../../utils/createControllablePromise\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _useTimeout = require(\"../../utils/useTimeout\");\nvar _gridColumnsInterfaces = require(\"../columns/gridColumnsInterfaces\");\nvar _columns = require(\"../columns\");\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, isRtl) {\n  const side = separator.classList.contains(_gridClasses.gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (isRtl) {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef(undefined);\n  const selector = () => (0, _virtualization.gridVirtualizationColumnEnabledSelector)(apiRef);\n  const value = (0, _utils.useGridSelector)(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = (0, _createControllablePromise.createControllablePromise)();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(_gridClasses.gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = (0, _domUtils.findGridCells)(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = (0, _domUtils.findGridHeader)(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${_gridClasses.gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${_gridClasses.gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = (0, _utils2.clamp)(maxContent, min, max);\n  });\n  root.classList.remove(_gridClasses.gridClasses.autosizing);\n  return widthByField;\n}\nconst columnResizeStateInitializer = state => (0, _extends2.default)({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nexports.columnResizeStateInitializer = columnResizeStateInitializer;\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nconst useGridColumnResize = (apiRef, props) => {\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridColumnResize');\n  const refs = (0, _useLazyRef.default)(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef(null);\n  const resizeDirection = React.useRef(null);\n  const stopResizeEventTimeout = (0, _useTimeout.useTimeout)();\n  const touchId = React.useRef(undefined);\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    if (columnWidthDiff > 0) {\n      const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n      apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    }\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = (0, _columns.gridColumnsStateSelector)(apiRef);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = (0, _domUtils.getFieldsFromGroupHeaderElem)(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = (0, _domUtils.findHeaderElementFromField)(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${_gridClasses.gridClasses.headerFilterRow} [data-field=\"${(0, _domUtils.escapeOperandAttributeSelector)(colDef.field)}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = (0, _domUtils.findGroupHeaderElementsFromField)(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = (0, _domUtils.findGridCellElementsFromCol)(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = (0, _domUtils.findGridElement)(apiRef.current, isRtl ? 'filler--pinnedRight' : 'filler--pinnedLeft');\n    refs.fillerRight = (0, _domUtils.findGridElement)(apiRef.current, isRtl ? 'filler--pinnedLeft' : 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT ? [] : (0, _domUtils.findLeftPinnedCellsAfterCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedCellsBefore = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT ? [] : (0, _domUtils.findRightPinnedCellsBeforeCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT ? [] : (0, _domUtils.findLeftPinnedHeadersAfterCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT ? [] : (0, _domUtils.findRightPinnedHeadersBeforeCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    resizeDirection.current = getResizeDirection(separator, isRtl);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = (0, _useEventCallback.default)(finishResize);\n  const handleResizeMouseMove = (0, _useEventCallback.default)(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = (0, _utils2.clamp)(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = (0, _useEventCallback.default)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = (0, _useEventCallback.default)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = (0, _utils2.clamp)(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = (0, _useEventCallback.default)(event => {\n    const cellSeparator = (0, _domUtils.findParentElementFromClassName)(event.target, _gridClasses.gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = (0, _domUtils.findParentElementFromClassName)(event.target, _gridClasses.gridClasses.columnHeader);\n    const field = (0, _domUtils.getFieldFromHeaderElem)(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = (0, _ownerDocument.default)(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = (0, _ownerDocument.default)(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      columnResize: (0, _extends2.default)({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      columnResize: (0, _extends2.default)({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = (0, _useEventCallback.default)(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(_gridClasses.gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = (0, _ownerDocument.default)(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = (0, _useEventCallback.default)((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns((0, _extends2.default)({}, props.autosizeOptions, {\n      disableColumnVirtualization: false,\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = (0, _columns.gridColumnsStateSelector)(apiRef);\n    const options = (0, _extends2.default)({}, _gridColumnResizeApi.DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      if (!props.disableVirtualization && options.disableColumnVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(false);\n        await columnVirtualizationDisabled();\n      }\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => (0, _extends2.default)({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field],\n        flex: 0\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const dimensions = apiRef.current.getRootDimensions();\n        const availableWidth = dimensions.viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      if (!props.disableVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(true);\n      }\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled, props.disableVirtualization]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  (0, _utils.useOnMount)(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  (0, _utils.useGridNativeEventListener)(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  (0, _utils.useGridApiMethod)(apiRef, {\n    autosizeColumns\n  }, 'public');\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStop', handleResizeStop);\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStart', handleResizeStart);\n  (0, _utils.useGridEvent)(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  (0, _utils.useGridEvent)(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  (0, _utils.useGridEventPriority)(apiRef, 'columnResize', props.onColumnResize);\n  (0, _utils.useGridEventPriority)(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nexports.useGridColumnResize = useGridColumnResize;\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridColumnResize","columnResizeStateInitializer","_extends2","React","_useEventCallback","_ownerDocument","_useLazyRef","_RtlProvider","_domUtils","_gridColumnResizeApi","_gridClasses","_utils","_virtualization","_createControllablePromise","_utils2","_useTimeout","_gridColumnsInterfaces","_columns","trackFinger","event","currentTouchId","undefined","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","separator","isRtl","classList","contains","gridClasses","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","gridVirtualizationColumnEnabledSelector","useGridSelector","useEffect","current","resolve","asyncCheck","Promise","createControllablePromise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","findGridCells","field","widths","map","cell","getBoundingClientRect","width","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","findGridHeader","title","querySelector","columnHeaderTitle","content","columnHeaderTitleContainerContent","iconContainer","iconButtonContainer","menuContainer","menuIcon","element","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","scrollWidth","clientWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","clamp","remove","state","columnResize","resizingColumnField","createResizeRefs","colDef","initialColWidth","initialTotalWidth","previousMouseClickEvent","columnHeaderElement","headerFilterElement","groupHeaderElements","cellElements","leftPinnedCellsAfter","rightPinnedCellsBefore","fillerLeft","fillerRight","leftPinnedHeadersAfter","rightPinnedHeadersBefore","props","useRtl","logger","useGridLogger","refs","stopResizeEventTimeout","useTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","columnWidthDiff","newTotalWidth","setProperty","computedWidth","flex","div","finalWidth","getAttribute","pinnedPosition","unstable_applyPipeProcessors","GridPinnedColumnPosition","LEFT","updateProperty","RIGHT","finishResize","nativeEvent","stopListening","prevEvent","prevTimeStamp","timeStamp","prevClientX","prevClientY","publishEvent","setColumnWidth","columnsState","gridColumnsStateSelector","fields","getFieldsFromGroupHeaderElem","reduce","acc","columnVisibilityModel","lookup","start","storeReferences","xStart","getRootDimensions","rowWidth","findHeaderElementFromField","columnHeadersContainerRef","headerFilterRow","escapeOperandAttributeSelector","findGroupHeaderElementsFromField","findGridCellElementsFromCol","findGridElement","findLeftPinnedCellsAfterCol","findRightPinnedCellsBeforeCol","findLeftPinnedHeadersAfterCol","findRightPinnedHeadersBeforeCol","handleResizeMouseUp","handleResizeMouseMove","buttons","params","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","cellSeparator","findParentElementFromClassName","target","columnHeader","getFieldFromHeaderElem","getColumn","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","setState","handleResizeStop","handleColumnResizeMouseDown","button","cursor","handleColumnSeparatorDoubleClick","disableAutosize","resizable","autosizeColumns","autosizeOptions","disableColumnVirtualization","columnVirtualizationDisabled","isAutosizingRef","userOptions","DEFAULT_GRID_AUTOSIZE_OPTIONS","orderedFields","c","disableVirtualization","unstable_setColumnVirtualization","newColumns","expand","visibleColumns","totalWidth","total","dimensions","availableWidth","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","newColumn","index","getColumnHeaderElement","useOnMount","autosizeOnMount","then","useGridNativeEventListener","passive","useGridApiMethod","useGridEvent","useGridEventPriority","onColumnResize","onColumnWidthChange","property","delta"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridColumnResize = exports.columnResizeStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _ownerDocument = _interopRequireDefault(require(\"@mui/utils/ownerDocument\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _gridColumnResizeApi = require(\"./gridColumnResizeApi\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _utils = require(\"../../utils\");\nvar _virtualization = require(\"../virtualization\");\nvar _createControllablePromise = require(\"../../../utils/createControllablePromise\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _useTimeout = require(\"../../utils/useTimeout\");\nvar _gridColumnsInterfaces = require(\"../columns/gridColumnsInterfaces\");\nvar _columns = require(\"../columns\");\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, isRtl) {\n  const side = separator.classList.contains(_gridClasses.gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (isRtl) {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef(undefined);\n  const selector = () => (0, _virtualization.gridVirtualizationColumnEnabledSelector)(apiRef);\n  const value = (0, _utils.useGridSelector)(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = (0, _createControllablePromise.createControllablePromise)();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(_gridClasses.gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = (0, _domUtils.findGridCells)(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = (0, _domUtils.findGridHeader)(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${_gridClasses.gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${_gridClasses.gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = (0, _utils2.clamp)(maxContent, min, max);\n  });\n  root.classList.remove(_gridClasses.gridClasses.autosizing);\n  return widthByField;\n}\nconst columnResizeStateInitializer = state => (0, _extends2.default)({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nexports.columnResizeStateInitializer = columnResizeStateInitializer;\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nconst useGridColumnResize = (apiRef, props) => {\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridColumnResize');\n  const refs = (0, _useLazyRef.default)(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef(null);\n  const resizeDirection = React.useRef(null);\n  const stopResizeEventTimeout = (0, _useTimeout.useTimeout)();\n  const touchId = React.useRef(undefined);\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    if (columnWidthDiff > 0) {\n      const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n      apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    }\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = (0, _columns.gridColumnsStateSelector)(apiRef);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = (0, _domUtils.getFieldsFromGroupHeaderElem)(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = (0, _domUtils.findHeaderElementFromField)(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${_gridClasses.gridClasses.headerFilterRow} [data-field=\"${(0, _domUtils.escapeOperandAttributeSelector)(colDef.field)}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = (0, _domUtils.findGroupHeaderElementsFromField)(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = (0, _domUtils.findGridCellElementsFromCol)(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = (0, _domUtils.findGridElement)(apiRef.current, isRtl ? 'filler--pinnedRight' : 'filler--pinnedLeft');\n    refs.fillerRight = (0, _domUtils.findGridElement)(apiRef.current, isRtl ? 'filler--pinnedLeft' : 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT ? [] : (0, _domUtils.findLeftPinnedCellsAfterCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedCellsBefore = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT ? [] : (0, _domUtils.findRightPinnedCellsBeforeCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.LEFT ? [] : (0, _domUtils.findLeftPinnedHeadersAfterCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== _gridColumnsInterfaces.GridPinnedColumnPosition.RIGHT ? [] : (0, _domUtils.findRightPinnedHeadersBeforeCol)(apiRef.current, refs.columnHeaderElement, isRtl);\n    resizeDirection.current = getResizeDirection(separator, isRtl);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = (0, _useEventCallback.default)(finishResize);\n  const handleResizeMouseMove = (0, _useEventCallback.default)(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = (0, _utils2.clamp)(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = (0, _useEventCallback.default)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = (0, _useEventCallback.default)(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = (0, _utils2.clamp)(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = (0, _useEventCallback.default)(event => {\n    const cellSeparator = (0, _domUtils.findParentElementFromClassName)(event.target, _gridClasses.gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = (0, _domUtils.findParentElementFromClassName)(event.target, _gridClasses.gridClasses.columnHeader);\n    const field = (0, _domUtils.getFieldFromHeaderElem)(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = (0, _ownerDocument.default)(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = (0, _ownerDocument.default)(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      columnResize: (0, _extends2.default)({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      columnResize: (0, _extends2.default)({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = (0, _useEventCallback.default)(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(_gridClasses.gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = (0, _ownerDocument.default)(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = (0, _useEventCallback.default)((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns((0, _extends2.default)({}, props.autosizeOptions, {\n      disableColumnVirtualization: false,\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = (0, _columns.gridColumnsStateSelector)(apiRef);\n    const options = (0, _extends2.default)({}, _gridColumnResizeApi.DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      if (!props.disableVirtualization && options.disableColumnVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(false);\n        await columnVirtualizationDisabled();\n      }\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => (0, _extends2.default)({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field],\n        flex: 0\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const dimensions = apiRef.current.getRootDimensions();\n        const availableWidth = dimensions.viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      if (!props.disableVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(true);\n      }\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled, props.disableVirtualization]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  (0, _utils.useOnMount)(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  (0, _utils.useGridNativeEventListener)(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  (0, _utils.useGridApiMethod)(apiRef, {\n    autosizeColumns\n  }, 'public');\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStop', handleResizeStop);\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStart', handleResizeStart);\n  (0, _utils.useGridEvent)(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  (0, _utils.useGridEvent)(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  (0, _utils.useGridEventPriority)(apiRef, 'columnResize', props.onColumnResize);\n  (0, _utils.useGridEventPriority)(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nexports.useGridColumnResize = useGridColumnResize;\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}