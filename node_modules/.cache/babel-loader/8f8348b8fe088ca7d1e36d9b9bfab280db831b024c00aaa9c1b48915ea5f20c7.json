{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unwrapGroupingColumnModel = exports.getColumnGroupsHeaderStructure = void 0;\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _gridColumnGrouping = require(\"../../../models/gridColumnGrouping\");\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if ((0, _gridColumnGrouping.isLeaf)(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nconst unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexports.unwrapGroupingColumnModel = unwrapGroupingColumnModel;\nconst getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {\n  const getParents = field => unwrappedGroupingModel[field] ?? [];\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => (0, _isDeepEqual.isDeepEqual)(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  const haveDifferentContainers = (field1, field2) => {\n    if (pinnedFields?.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {\n      return true;\n    }\n    if (pinnedFields?.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {\n      return true;\n    }\n    return false;\n  };\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      const groupId = getParents(newField)[depth] ?? null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) ||\n      // Fix for https://github.com/mui/mui-x/issues/7041\n      haveDifferentContainers(prevField, newField)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};\nexports.getColumnGroupsHeaderStructure = getColumnGroupsHeaderStructure;","map":{"version":3,"names":["Object","defineProperty","exports","value","unwrapGroupingColumnModel","getColumnGroupsHeaderStructure","_isDeepEqual","require","_gridColumnGrouping","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplete","isLeaf","field","undefined","Error","join","groupId","children","forEach","child","columnGroupingModel","unwrappedSubTree","orderedColumns","unwrappedGroupingModel","pinnedFields","getParents","groupingHeaderStructure","maxDepth","Math","max","map","length","haveSameParents","field1","field2","depth","isDeepEqual","slice","haveDifferentContainers","left","includes","right","depthStructure","reduce","structure","newField","columnFields","lastGroup","prevField","prevGroupId","push"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unwrapGroupingColumnModel = exports.getColumnGroupsHeaderStructure = void 0;\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _gridColumnGrouping = require(\"../../../models/gridColumnGrouping\");\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {\n  if ((0, _gridColumnGrouping.isLeaf)(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI X: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n    unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;\n    return;\n  }\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);\n  });\n};\n\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nconst unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nexports.unwrapGroupingColumnModel = unwrapGroupingColumnModel;\nconst getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {\n  const getParents = field => unwrappedGroupingModel[field] ?? [];\n  const groupingHeaderStructure = [];\n  const maxDepth = Math.max(...orderedColumns.map(field => getParents(field).length));\n  const haveSameParents = (field1, field2, depth) => (0, _isDeepEqual.isDeepEqual)(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));\n  const haveDifferentContainers = (field1, field2) => {\n    if (pinnedFields?.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {\n      return true;\n    }\n    if (pinnedFields?.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {\n      return true;\n    }\n    return false;\n  };\n  for (let depth = 0; depth < maxDepth; depth += 1) {\n    const depthStructure = orderedColumns.reduce((structure, newField) => {\n      const groupId = getParents(newField)[depth] ?? null;\n      if (structure.length === 0) {\n        return [{\n          columnFields: [newField],\n          groupId\n        }];\n      }\n      const lastGroup = structure[structure.length - 1];\n      const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];\n      const prevGroupId = lastGroup.groupId;\n      if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) ||\n      // Fix for https://github.com/mui/mui-x/issues/7041\n      haveDifferentContainers(prevField, newField)) {\n        // It's a new group\n        return [...structure, {\n          columnFields: [newField],\n          groupId\n        }];\n      }\n\n      // It extends the previous group\n      return [...structure.slice(0, structure.length - 1), {\n        columnFields: [...lastGroup.columnFields, newField],\n        groupId\n      }];\n    }, []);\n    groupingHeaderStructure.push(depthStructure);\n  }\n  return groupingHeaderStructure;\n};\nexports.getColumnGroupsHeaderStructure = getColumnGroupsHeaderStructure;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}