{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listViewStateInitializer = void 0;\nexports.useGridListView = useGridListView;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _dimensions = require(\"../dimensions\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nconst listViewStateInitializer = (state, props, apiRef) => (0, _extends2.default)({}, state, {\n  listViewColumn: props.listViewColumn ? (0, _extends2.default)({}, props.listViewColumn, {\n    computedWidth: getListColumnWidth(apiRef)\n  }) : undefined\n});\nexports.listViewStateInitializer = listViewStateInitializer;\nfunction useGridListView(apiRef, props) {\n  /*\n   * EVENTS\n   */\n  const updateListColumnWidth = () => {\n    apiRef.current.setState(state => {\n      if (!state.listViewColumn) {\n        return state;\n      }\n      return (0, _extends2.default)({}, state, {\n        listViewColumn: (0, _extends2.default)({}, state.listViewColumn, {\n          computedWidth: getListColumnWidth(apiRef)\n        })\n      });\n    });\n  };\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      updateListColumnWidth();\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnVisibilityModelChange', updateListColumnWidth);\n\n  /*\n   * EFFECTS\n   */\n  (0, _useEnhancedEffect.default)(() => {\n    const listColumn = props.listViewColumn;\n    if (listColumn) {\n      apiRef.current.setState(state => {\n        return (0, _extends2.default)({}, state, {\n          listViewColumn: (0, _extends2.default)({}, listColumn, {\n            computedWidth: getListColumnWidth(apiRef)\n          })\n        });\n      });\n    }\n  }, [apiRef, props.listViewColumn]);\n  React.useEffect(() => {\n    if (props.listView && !props.listViewColumn) {\n      (0, _warning.warnOnce)(['MUI X: The `listViewColumn` prop must be set if `listView` is enabled.', 'To fix, pass a column definition to the `listViewColumn` prop, e.g. `{ field: \"example\", renderCell: (params) => <div>{params.row.id}</div> }`.', 'For more details, see https://mui.com/x/react-data-grid/list-view/']);\n    }\n  }, [props.listView, props.listViewColumn]);\n}\nfunction getListColumnWidth(apiRef) {\n  return (0, _dimensions.gridDimensionsSelector)(apiRef).viewportInnerSize.width;\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","listViewStateInitializer","useGridListView","_extends2","React","_useEnhancedEffect","_warning","_dimensions","_useGridEvent","state","props","apiRef","listViewColumn","computedWidth","getListColumnWidth","undefined","updateListColumnWidth","current","setState","prevInnerWidth","useRef","handleGridSizeChange","viewportInnerSize","width","useGridEvent","listColumn","useEffect","listView","warnOnce","gridDimensionsSelector"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/listView/useGridListView.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listViewStateInitializer = void 0;\nexports.useGridListView = useGridListView;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _dimensions = require(\"../dimensions\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nconst listViewStateInitializer = (state, props, apiRef) => (0, _extends2.default)({}, state, {\n  listViewColumn: props.listViewColumn ? (0, _extends2.default)({}, props.listViewColumn, {\n    computedWidth: getListColumnWidth(apiRef)\n  }) : undefined\n});\nexports.listViewStateInitializer = listViewStateInitializer;\nfunction useGridListView(apiRef, props) {\n  /*\n   * EVENTS\n   */\n  const updateListColumnWidth = () => {\n    apiRef.current.setState(state => {\n      if (!state.listViewColumn) {\n        return state;\n      }\n      return (0, _extends2.default)({}, state, {\n        listViewColumn: (0, _extends2.default)({}, state.listViewColumn, {\n          computedWidth: getListColumnWidth(apiRef)\n        })\n      });\n    });\n  };\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      updateListColumnWidth();\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnVisibilityModelChange', updateListColumnWidth);\n\n  /*\n   * EFFECTS\n   */\n  (0, _useEnhancedEffect.default)(() => {\n    const listColumn = props.listViewColumn;\n    if (listColumn) {\n      apiRef.current.setState(state => {\n        return (0, _extends2.default)({}, state, {\n          listViewColumn: (0, _extends2.default)({}, listColumn, {\n            computedWidth: getListColumnWidth(apiRef)\n          })\n        });\n      });\n    }\n  }, [apiRef, props.listViewColumn]);\n  React.useEffect(() => {\n    if (props.listView && !props.listViewColumn) {\n      (0, _warning.warnOnce)(['MUI X: The `listViewColumn` prop must be set if `listView` is enabled.', 'To fix, pass a column definition to the `listViewColumn` prop, e.g. `{ field: \"example\", renderCell: (params) => <div>{params.row.id}</div> }`.', 'For more details, see https://mui.com/x/react-data-grid/list-view/']);\n    }\n  }, [props.listView, props.listViewColumn]);\n}\nfunction getListColumnWidth(apiRef) {\n  return (0, _dimensions.gridDimensionsSelector)(apiRef).viewportInnerSize.width;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9F,IAAIC,sBAAsB,GAAGF,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAC5FE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,wBAAwB,GAAG,KAAK,CAAC;AACzCF,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,IAAIC,SAAS,GAAGP,sBAAsB,CAACF,OAAO,CAAC,gCAAgC,CAAC,CAAC;AACjF,IAAIU,KAAK,GAAGX,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD,IAAIW,kBAAkB,GAAGT,sBAAsB,CAACF,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxF,IAAIY,QAAQ,GAAGZ,OAAO,CAAC,0BAA0B,CAAC;AAClD,IAAIa,WAAW,GAAGb,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIc,aAAa,GAAGd,OAAO,CAAC,0BAA0B,CAAC;AACvD,MAAMO,wBAAwB,GAAGA,CAACQ,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC,EAAER,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEc,KAAK,EAAE;EAC3FG,cAAc,EAAEF,KAAK,CAACE,cAAc,GAAG,CAAC,CAAC,EAAET,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEe,KAAK,CAACE,cAAc,EAAE;IACtFC,aAAa,EAAEC,kBAAkB,CAACH,MAAM;EAC1C,CAAC,CAAC,GAAGI;AACP,CAAC,CAAC;AACFhB,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB;AAC3D,SAASC,eAAeA,CAACS,MAAM,EAAED,KAAK,EAAE;EACtC;AACF;AACA;EACE,MAAMM,qBAAqB,GAAGA,CAAA,KAAM;IAClCL,MAAM,CAACM,OAAO,CAACC,QAAQ,CAACT,KAAK,IAAI;MAC/B,IAAI,CAACA,KAAK,CAACG,cAAc,EAAE;QACzB,OAAOH,KAAK;MACd;MACA,OAAO,CAAC,CAAC,EAAEN,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEc,KAAK,EAAE;QACvCG,cAAc,EAAE,CAAC,CAAC,EAAET,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEc,KAAK,CAACG,cAAc,EAAE;UAC/DC,aAAa,EAAEC,kBAAkB,CAACH,MAAM;QAC1C,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACD,MAAMQ,cAAc,GAAGf,KAAK,CAACgB,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMC,oBAAoB,GAAGC,iBAAiB,IAAI;IAChD,IAAIH,cAAc,CAACF,OAAO,KAAKK,iBAAiB,CAACC,KAAK,EAAE;MACtDJ,cAAc,CAACF,OAAO,GAAGK,iBAAiB,CAACC,KAAK;MAChDP,qBAAqB,CAAC,CAAC;IACzB;EACF,CAAC;EACD,CAAC,CAAC,EAAER,aAAa,CAACgB,YAAY,EAAEb,MAAM,EAAE,yBAAyB,EAAEU,oBAAoB,CAAC;EACxF,CAAC,CAAC,EAAEb,aAAa,CAACgB,YAAY,EAAEb,MAAM,EAAE,6BAA6B,EAAEK,qBAAqB,CAAC;;EAE7F;AACF;AACA;EACE,CAAC,CAAC,EAAEX,kBAAkB,CAACV,OAAO,EAAE,MAAM;IACpC,MAAM8B,UAAU,GAAGf,KAAK,CAACE,cAAc;IACvC,IAAIa,UAAU,EAAE;MACdd,MAAM,CAACM,OAAO,CAACC,QAAQ,CAACT,KAAK,IAAI;QAC/B,OAAO,CAAC,CAAC,EAAEN,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEc,KAAK,EAAE;UACvCG,cAAc,EAAE,CAAC,CAAC,EAAET,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAE8B,UAAU,EAAE;YACrDZ,aAAa,EAAEC,kBAAkB,CAACH,MAAM;UAC1C,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACA,MAAM,EAAED,KAAK,CAACE,cAAc,CAAC,CAAC;EAClCR,KAAK,CAACsB,SAAS,CAAC,MAAM;IACpB,IAAIhB,KAAK,CAACiB,QAAQ,IAAI,CAACjB,KAAK,CAACE,cAAc,EAAE;MAC3C,CAAC,CAAC,EAAEN,QAAQ,CAACsB,QAAQ,EAAE,CAAC,wEAAwE,EAAE,iJAAiJ,EAAE,oEAAoE,CAAC,CAAC;IAC7T;EACF,CAAC,EAAE,CAAClB,KAAK,CAACiB,QAAQ,EAAEjB,KAAK,CAACE,cAAc,CAAC,CAAC;AAC5C;AACA,SAASE,kBAAkBA,CAACH,MAAM,EAAE;EAClC,OAAO,CAAC,CAAC,EAAEJ,WAAW,CAACsB,sBAAsB,EAAElB,MAAM,CAAC,CAACW,iBAAiB,CAACC,KAAK;AAChF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}