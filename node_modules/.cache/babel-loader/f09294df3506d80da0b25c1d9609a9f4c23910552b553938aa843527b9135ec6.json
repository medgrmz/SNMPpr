{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCellValue = void 0;\nexports.getUnprocessedRange = getUnprocessedRange;\nexports.isRowContextInitialized = isRowContextInitialized;\nexports.isRowRangeUpdated = isRowRangeUpdated;\nfunction getUnprocessedRange(testRange, processedRange) {\n  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {\n    return null;\n  }\n  // Overflowing at the end\n  // Example: testRange={ firstRowIndex: 10, lastRowIndex: 20 }, processedRange={ firstRowIndex: 0, lastRowIndex: 15 }\n  // Unprocessed Range={ firstRowIndex: 16, lastRowIndex: 20 }\n  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex > processedRange.lastRowIndex) {\n    return {\n      firstRowIndex: processedRange.lastRowIndex,\n      lastRowIndex: testRange.lastRowIndex\n    };\n  }\n  // Overflowing at the beginning\n  // Example: testRange={ firstRowIndex: 0, lastRowIndex: 20 }, processedRange={ firstRowIndex: 16, lastRowIndex: 30 }\n  // Unprocessed Range={ firstRowIndex: 0, lastRowIndex: 15 }\n  if (testRange.firstRowIndex < processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {\n    return {\n      firstRowIndex: testRange.firstRowIndex,\n      lastRowIndex: processedRange.firstRowIndex - 1\n    };\n  }\n  // TODO: Should return two ranges handle overflowing at both ends ?\n  return testRange;\n}\nfunction isRowContextInitialized(renderContext) {\n  return renderContext.firstRowIndex !== 0 || renderContext.lastRowIndex !== 0;\n}\nfunction isRowRangeUpdated(range1, range2) {\n  return range1.firstRowIndex !== range2.firstRowIndex || range1.lastRowIndex !== range2.lastRowIndex;\n}\nconst getCellValue = (row, colDef, apiRef) => {\n  if (!row) {\n    return null;\n  }\n  let cellValue = row[colDef.field];\n  const valueGetter = colDef.rowSpanValueGetter ?? colDef.valueGetter;\n  if (valueGetter) {\n    cellValue = valueGetter(cellValue, row, colDef, apiRef);\n  }\n  return cellValue;\n};\nexports.getCellValue = getCellValue;","map":{"version":3,"names":["Object","defineProperty","exports","value","getCellValue","getUnprocessedRange","isRowContextInitialized","isRowRangeUpdated","testRange","processedRange","firstRowIndex","lastRowIndex","renderContext","range1","range2","row","colDef","apiRef","cellValue","field","valueGetter","rowSpanValueGetter"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowSpanningUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCellValue = void 0;\nexports.getUnprocessedRange = getUnprocessedRange;\nexports.isRowContextInitialized = isRowContextInitialized;\nexports.isRowRangeUpdated = isRowRangeUpdated;\nfunction getUnprocessedRange(testRange, processedRange) {\n  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {\n    return null;\n  }\n  // Overflowing at the end\n  // Example: testRange={ firstRowIndex: 10, lastRowIndex: 20 }, processedRange={ firstRowIndex: 0, lastRowIndex: 15 }\n  // Unprocessed Range={ firstRowIndex: 16, lastRowIndex: 20 }\n  if (testRange.firstRowIndex >= processedRange.firstRowIndex && testRange.lastRowIndex > processedRange.lastRowIndex) {\n    return {\n      firstRowIndex: processedRange.lastRowIndex,\n      lastRowIndex: testRange.lastRowIndex\n    };\n  }\n  // Overflowing at the beginning\n  // Example: testRange={ firstRowIndex: 0, lastRowIndex: 20 }, processedRange={ firstRowIndex: 16, lastRowIndex: 30 }\n  // Unprocessed Range={ firstRowIndex: 0, lastRowIndex: 15 }\n  if (testRange.firstRowIndex < processedRange.firstRowIndex && testRange.lastRowIndex <= processedRange.lastRowIndex) {\n    return {\n      firstRowIndex: testRange.firstRowIndex,\n      lastRowIndex: processedRange.firstRowIndex - 1\n    };\n  }\n  // TODO: Should return two ranges handle overflowing at both ends ?\n  return testRange;\n}\nfunction isRowContextInitialized(renderContext) {\n  return renderContext.firstRowIndex !== 0 || renderContext.lastRowIndex !== 0;\n}\nfunction isRowRangeUpdated(range1, range2) {\n  return range1.firstRowIndex !== range2.firstRowIndex || range1.lastRowIndex !== range2.lastRowIndex;\n}\nconst getCellValue = (row, colDef, apiRef) => {\n  if (!row) {\n    return null;\n  }\n  let cellValue = row[colDef.field];\n  const valueGetter = colDef.rowSpanValueGetter ?? colDef.valueGetter;\n  if (valueGetter) {\n    cellValue = valueGetter(cellValue, row, colDef, apiRef);\n  }\n  return cellValue;\n};\nexports.getCellValue = getCellValue;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7BF,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjDH,OAAO,CAACI,uBAAuB,GAAGA,uBAAuB;AACzDJ,OAAO,CAACK,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASF,mBAAmBA,CAACG,SAAS,EAAEC,cAAc,EAAE;EACtD,IAAID,SAAS,CAACE,aAAa,IAAID,cAAc,CAACC,aAAa,IAAIF,SAAS,CAACG,YAAY,IAAIF,cAAc,CAACE,YAAY,EAAE;IACpH,OAAO,IAAI;EACb;EACA;EACA;EACA;EACA,IAAIH,SAAS,CAACE,aAAa,IAAID,cAAc,CAACC,aAAa,IAAIF,SAAS,CAACG,YAAY,GAAGF,cAAc,CAACE,YAAY,EAAE;IACnH,OAAO;MACLD,aAAa,EAAED,cAAc,CAACE,YAAY;MAC1CA,YAAY,EAAEH,SAAS,CAACG;IAC1B,CAAC;EACH;EACA;EACA;EACA;EACA,IAAIH,SAAS,CAACE,aAAa,GAAGD,cAAc,CAACC,aAAa,IAAIF,SAAS,CAACG,YAAY,IAAIF,cAAc,CAACE,YAAY,EAAE;IACnH,OAAO;MACLD,aAAa,EAAEF,SAAS,CAACE,aAAa;MACtCC,YAAY,EAAEF,cAAc,CAACC,aAAa,GAAG;IAC/C,CAAC;EACH;EACA;EACA,OAAOF,SAAS;AAClB;AACA,SAASF,uBAAuBA,CAACM,aAAa,EAAE;EAC9C,OAAOA,aAAa,CAACF,aAAa,KAAK,CAAC,IAAIE,aAAa,CAACD,YAAY,KAAK,CAAC;AAC9E;AACA,SAASJ,iBAAiBA,CAACM,MAAM,EAAEC,MAAM,EAAE;EACzC,OAAOD,MAAM,CAACH,aAAa,KAAKI,MAAM,CAACJ,aAAa,IAAIG,MAAM,CAACF,YAAY,KAAKG,MAAM,CAACH,YAAY;AACrG;AACA,MAAMP,YAAY,GAAGA,CAACW,GAAG,EAAEC,MAAM,EAAEC,MAAM,KAAK;EAC5C,IAAI,CAACF,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACA,IAAIG,SAAS,GAAGH,GAAG,CAACC,MAAM,CAACG,KAAK,CAAC;EACjC,MAAMC,WAAW,GAAGJ,MAAM,CAACK,kBAAkB,IAAIL,MAAM,CAACI,WAAW;EACnE,IAAIA,WAAW,EAAE;IACfF,SAAS,GAAGE,WAAW,CAACF,SAAS,EAAEH,GAAG,EAAEC,MAAM,EAAEC,MAAM,CAAC;EACzD;EACA,OAAOC,SAAS;AAClB,CAAC;AACDhB,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}