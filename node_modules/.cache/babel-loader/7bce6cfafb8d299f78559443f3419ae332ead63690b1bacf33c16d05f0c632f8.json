{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridColumnMenu = exports.columnMenuStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"../../utils\");\nvar _columnMenuSelector = require(\"./columnMenuSelector\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nconst columnMenuStateInitializer = state => (0, _extends2.default)({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexports.columnMenuStateInitializer = columnMenuStateInitializer;\nconst useGridColumnMenu = apiRef => {\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridColumnMenu');\n\n  /**\n   * API METHODS\n   */\n  const showColumnMenu = React.useCallback(field => {\n    const columnMenuState = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    const newState = {\n      open: true,\n      field\n    };\n    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;\n    if (shouldUpdate) {\n      apiRef.current.setState(state => {\n        if (state.columnMenu.open && state.columnMenu.field === field) {\n          return state;\n        }\n        logger.debug('Opening Column Menu');\n        return (0, _extends2.default)({}, state, {\n          columnMenu: {\n            open: true,\n            field\n          }\n        });\n      });\n      apiRef.current.hidePreferences();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    if (columnMenuState.field) {\n      const columnLookup = (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef);\n      const columnVisibilityModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n      const orderedFields = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n      let fieldToFocus = columnMenuState.field;\n\n      // If the column was removed from the grid, we need to find the closest visible field\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      }\n\n      // If the field to focus is hidden, we need to find the closest visible field\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n    const newState = {\n      open: false,\n      field: undefined\n    };\n    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;\n    if (shouldUpdate) {\n      apiRef.current.setState(state => {\n        logger.debug('Hiding Column Menu');\n        return (0, _extends2.default)({}, state, {\n          columnMenu: newState\n        });\n      });\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  (0, _utils.useGridApiMethod)(apiRef, columnMenuApi, 'public');\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStart', hideColumnMenu);\n  (0, _utils.useGridEvent)(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  (0, _utils.useGridEvent)(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};\nexports.useGridColumnMenu = useGridColumnMenu;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridColumnMenu","columnMenuStateInitializer","_extends2","React","_utils","_columnMenuSelector","_gridColumnsSelector","state","columnMenu","open","apiRef","logger","useGridLogger","showColumnMenu","useCallback","field","columnMenuState","gridColumnMenuSelector","newState","shouldUpdate","current","setState","debug","hidePreferences","hideColumnMenu","columnLookup","gridColumnLookupSelector","columnVisibilityModel","gridColumnVisibilityModelSelector","orderedFields","gridColumnFieldsSelector","fieldToFocus","visibleOrderedFields","filter","fieldIndex","indexOf","setColumnHeaderFocus","undefined","toggleColumnMenu","columnMenuApi","useGridApiMethod","useGridEvent"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridColumnMenu = exports.columnMenuStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"../../utils\");\nvar _columnMenuSelector = require(\"./columnMenuSelector\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nconst columnMenuStateInitializer = state => (0, _extends2.default)({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexports.columnMenuStateInitializer = columnMenuStateInitializer;\nconst useGridColumnMenu = apiRef => {\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridColumnMenu');\n\n  /**\n   * API METHODS\n   */\n  const showColumnMenu = React.useCallback(field => {\n    const columnMenuState = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    const newState = {\n      open: true,\n      field\n    };\n    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;\n    if (shouldUpdate) {\n      apiRef.current.setState(state => {\n        if (state.columnMenu.open && state.columnMenu.field === field) {\n          return state;\n        }\n        logger.debug('Opening Column Menu');\n        return (0, _extends2.default)({}, state, {\n          columnMenu: {\n            open: true,\n            field\n          }\n        });\n      });\n      apiRef.current.hidePreferences();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const columnMenuState = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    if (columnMenuState.field) {\n      const columnLookup = (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef);\n      const columnVisibilityModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n      const orderedFields = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n      let fieldToFocus = columnMenuState.field;\n\n      // If the column was removed from the grid, we need to find the closest visible field\n      if (!columnLookup[fieldToFocus]) {\n        fieldToFocus = orderedFields[0];\n      }\n\n      // If the field to focus is hidden, we need to find the closest visible field\n      if (columnVisibilityModel[fieldToFocus] === false) {\n        // contains visible column fields + the field that was just hidden\n        const visibleOrderedFields = orderedFields.filter(field => {\n          if (field === fieldToFocus) {\n            return true;\n          }\n          return columnVisibilityModel[field] !== false;\n        });\n        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);\n        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];\n      }\n      apiRef.current.setColumnHeaderFocus(fieldToFocus);\n    }\n    const newState = {\n      open: false,\n      field: undefined\n    };\n    const shouldUpdate = newState.open !== columnMenuState.open || newState.field !== columnMenuState.field;\n    if (shouldUpdate) {\n      apiRef.current.setState(state => {\n        logger.debug('Hiding Column Menu');\n        return (0, _extends2.default)({}, state, {\n          columnMenu: newState\n        });\n      });\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = (0, _columnMenuSelector.gridColumnMenuSelector)(apiRef);\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  (0, _utils.useGridApiMethod)(apiRef, columnMenuApi, 'public');\n  (0, _utils.useGridEvent)(apiRef, 'columnResizeStart', hideColumnMenu);\n  (0, _utils.useGridEvent)(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  (0, _utils.useGridEvent)(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};\nexports.useGridColumnMenu = useGridColumnMenu;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}