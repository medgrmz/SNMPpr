{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCsvExport = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _exportAs = require(\"../../../utils/exportAs\");\nvar _csvSerializer = require(\"./serializers/csvSerializer\");\nvar _utils = require(\"./utils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _toolbar = require(\"../../../components/toolbar\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nconst useGridCsvExport = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = (0, _utils.getColumnsToExport)({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? _utils.defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return (0, _csvSerializer.buildCSV)({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    (0, _exportAs.exportAs)(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/(0, _jsxRuntime.jsx)(_toolbar.GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportMenu', addExportMenuButtons);\n};\nexports.useGridCsvExport = useGridCsvExport;","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","useGridCsvExport","React","_useGridApiMethod","_useGridLogger","_exportAs","_csvSerializer","_utils","_pipeProcessing","_toolbar","_jsxRuntime","apiRef","props","logger","useGridLogger","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","debug","exportedColumns","getColumnsToExport","getRowsToExport","defaultGetRowsToExport","exportedRowIds","buildCSV","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","exportAs","fileName","csvExportApi","useGridApiMethod","addExportMenuButtons","initialValue","disableToolbarButton","component","jsx","GridCsvExportMenuItem","componentName","useGridRegisterPipeProcessor"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCsvExport = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _exportAs = require(\"../../../utils/exportAs\");\nvar _csvSerializer = require(\"./serializers/csvSerializer\");\nvar _utils = require(\"./utils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _toolbar = require(\"../../../components/toolbar\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nconst useGridCsvExport = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = (0, _utils.getColumnsToExport)({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? _utils.defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return (0, _csvSerializer.buildCSV)({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    (0, _exportAs.exportAs)(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/(0, _jsxRuntime.jsx)(_toolbar.GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportMenu', addExportMenuButtons);\n};\nexports.useGridCsvExport = useGridCsvExport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}