{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowCount = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _filter = require(\"../filter\");\nvar _utils = require(\"../../utils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridPaginationSelector = require(\"./gridPaginationSelector\");\nconst useGridRowCount = (apiRef, props) => {\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = (0, _utils.useGridSelector)(apiRef, _filter.gridFilteredTopLevelRowCountSelector);\n  const rowCountState = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationRowCountSelector);\n  const paginationMeta = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationMetaSelector);\n  const paginationModel = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationModelSelector);\n  const previousPageSize = (0, _useLazyRef.default)(() => (0, _gridPaginationSelector.gridPaginationModelSelector)(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: _gridPaginationSelector.gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      pagination: (0, _extends2.default)({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  (0, _utils.useGridApiMethod)(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = (0, _gridPaginationSelector.gridPaginationRowCountSelector)(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      pagination: (0, _extends2.default)({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : (0, _gridPaginationSelector.gridPaginationRowCountSelector)(apiRef);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      pagination: (0, _extends2.default)({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  (0, _utils.useGridEvent)(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};\nexports.useGridRowCount = useGridRowCount;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridRowCount","_extends2","React","_useLazyRef","_filter","_utils","_pipeProcessing","_gridPaginationSelector","apiRef","props","logger","useGridLogger","visibleTopLevelRowCount","useGridSelector","gridFilteredTopLevelRowCountSelector","rowCountState","gridPaginationRowCountSelector","paginationMeta","gridPaginationMetaSelector","paginationModel","gridPaginationModelSelector","previousPageSize","pageSize","current","registerControlState","stateId","propModel","rowCount","propOnChange","onRowCountChange","stateSelector","changeEvent","setRowCount","useCallback","newRowCount","debug","setState","state","pagination","paginationRowCountApi","useGridApiMethod","stateExportPreProcessing","prevState","context","exportedRowCount","shouldExportRowCount","exportOnlyDirtyModels","initialState","stateRestorePreProcessing","params","restoredRowCount","stateToRestore","useGridRegisterPipeProcessor","handlePaginationModelChange","model","paginationMode","setPage","useGridEvent","useEffect","isLastPage","hasNextPage","page"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowCount = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _filter = require(\"../filter\");\nvar _utils = require(\"../../utils\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridPaginationSelector = require(\"./gridPaginationSelector\");\nconst useGridRowCount = (apiRef, props) => {\n  const logger = (0, _utils.useGridLogger)(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = (0, _utils.useGridSelector)(apiRef, _filter.gridFilteredTopLevelRowCountSelector);\n  const rowCountState = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationRowCountSelector);\n  const paginationMeta = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationMetaSelector);\n  const paginationModel = (0, _utils.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationModelSelector);\n  const previousPageSize = (0, _useLazyRef.default)(() => (0, _gridPaginationSelector.gridPaginationModelSelector)(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: _gridPaginationSelector.gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      pagination: (0, _extends2.default)({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  (0, _utils.useGridApiMethod)(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = (0, _gridPaginationSelector.gridPaginationRowCountSelector)(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      pagination: (0, _extends2.default)({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : (0, _gridPaginationSelector.gridPaginationRowCountSelector)(apiRef);\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      pagination: (0, _extends2.default)({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  (0, _utils.useGridEvent)(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};\nexports.useGridRowCount = useGridRowCount;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}