{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridVisibleRows = exports.getVisibleRows = void 0;\nvar _gridPaginationSelector = require(\"../features/pagination/gridPaginationSelector\");\nvar _ = require(\".\");\nconst getVisibleRows = (apiRef, props) => {\n  return (0, _gridPaginationSelector.gridVisibleRowsSelector)(apiRef);\n};\n\n/**\n * Computes the list of rows that are reachable by scroll.\n * Depending on whether pagination is enabled, it will return the rows in the current page.\n * - If the pagination is disabled or in server mode, it equals all the visible rows.\n * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.\n * - If the row tree is flat, it only contains up to `state.pageSize` rows.\n */\nexports.getVisibleRows = getVisibleRows;\nconst useGridVisibleRows = (apiRef, props) => {\n  return (0, _.useGridSelector)(apiRef, _gridPaginationSelector.gridVisibleRowsSelector);\n};\nexports.useGridVisibleRows = useGridVisibleRows;","map":{"version":3,"names":["Object","defineProperty","exports","value","useGridVisibleRows","getVisibleRows","_gridPaginationSelector","require","_","apiRef","props","gridVisibleRowsSelector","useGridSelector"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridVisibleRows = exports.getVisibleRows = void 0;\nvar _gridPaginationSelector = require(\"../features/pagination/gridPaginationSelector\");\nvar _ = require(\".\");\nconst getVisibleRows = (apiRef, props) => {\n  return (0, _gridPaginationSelector.gridVisibleRowsSelector)(apiRef);\n};\n\n/**\n * Computes the list of rows that are reachable by scroll.\n * Depending on whether pagination is enabled, it will return the rows in the current page.\n * - If the pagination is disabled or in server mode, it equals all the visible rows.\n * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.\n * - If the row tree is flat, it only contains up to `state.pageSize` rows.\n */\nexports.getVisibleRows = getVisibleRows;\nconst useGridVisibleRows = (apiRef, props) => {\n  return (0, _.useGridSelector)(apiRef, _gridPaginationSelector.gridVisibleRowsSelector);\n};\nexports.useGridVisibleRows = useGridVisibleRows;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,cAAc,GAAG,KAAK,CAAC;AAC5D,IAAIC,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC;AACtF,IAAIC,CAAC,GAAGD,OAAO,CAAC,GAAG,CAAC;AACpB,MAAMF,cAAc,GAAGA,CAACI,MAAM,EAAEC,KAAK,KAAK;EACxC,OAAO,CAAC,CAAC,EAAEJ,uBAAuB,CAACK,uBAAuB,EAAEF,MAAM,CAAC;AACrE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,MAAMD,kBAAkB,GAAGA,CAACK,MAAM,EAAEC,KAAK,KAAK;EAC5C,OAAO,CAAC,CAAC,EAAEF,CAAC,CAACI,eAAe,EAAEH,MAAM,EAAEH,uBAAuB,CAACK,uBAAuB,CAAC;AACxF,CAAC;AACDT,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}