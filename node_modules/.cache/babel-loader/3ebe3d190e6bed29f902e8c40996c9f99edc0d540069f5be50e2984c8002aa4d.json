{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridKeyboardNavigation = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _constants = require(\"../../../internals/constants\");\nvar _gridRowGroupingUtils = require(\"../../../internals/utils/gridRowGroupingUtils\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridCheckboxSelectionColDef = require(\"../../../colDef/gridCheckboxSelectionColDef\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _focus = require(\"../focus\");\nvar _gridColumnGroupsSelector = require(\"../columnGrouping/gridColumnGroupsSelector\");\nvar _gridHeaderFilteringSelectors = require(\"../headerFiltering/gridHeaderFilteringSelectors\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _utils = require(\"./utils\");\nvar _gridListViewSelectors = require(\"../listView/gridListViewSelectors\");\nvar _createSelector = require(\"../../../utils/createSelector\");\nvar _pagination = require(\"../pagination\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nconst gridVisibleRowsWithPinnedRowsSelector = (0, _createSelector.createSelectorMemoized)(_pagination.gridVisibleRowsSelector, _gridRowsSelector.gridPinnedRowsSelector, (visibleRows, pinnedRows) => {\n  return (pinnedRows.top || []).concat(visibleRows.rows, pinnedRows.bottom || []);\n});\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nconst useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridKeyboardNavigation');\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const listView = props.listView;\n  const getCurrentPageRows = React.useCallback(() => {\n    return gridVisibleRowsWithPinnedRowsSelector(apiRef);\n  }, [apiRef]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {GridRowId} rowId index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * @param {string} rowSpanScanDirection Which direction to search to find the next cell not hidden by `rowSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left', rowSpanScanDirection = 'up') => {\n    const visibleSortedRows = (0, _gridFilterSelector.gridExpandedSortedRowEntriesSelector)(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    const field = listView ? (0, _gridListViewSelectors.gridListColumnSelector)(apiRef).field : (0, _gridColumnsSelector.gridVisibleColumnFieldsSelector)(apiRef)[colIndex];\n    const nonRowSpannedRowId = (0, _utils.findNonRowSpannedCell)(apiRef, rowId, field, rowSpanScanDirection);\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === nonRowSpannedRowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    apiRef.current.setCellFocus(nonRowSpannedRowId, field);\n  }, [apiRef, logger, listView]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return getCurrentPageRows()[rowIndex]?.id;\n  }, [getCurrentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== _gridCheckboxSelectionColDef.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    const columnGroupMaxDepth = (0, _gridColumnGroupsSelector.gridColumnGroupsHeaderMaxDepthSelector)(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, isRtl, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = (0, _gridHeaderFilteringSelectors.gridHeaderFilteringEditFieldSelector)(apiRef) === params.field;\n    const isHeaderMenuOpen = (0, _gridHeaderFilteringSelectors.gridHeaderFilteringMenuSelector)(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !(0, _keyboardUtils.isNavigationKey)(event.key)) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeaderFilter, isRtl, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = (0, _focus.gridFocusColumnGroupHeaderSelector)(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if ((0, _domUtils.isEventTargetInPortal)(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === _gridEditRowModel.GridCellModes.Edit || !(0, _keyboardUtils.isNavigationKey)(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    if (currentPageRows.length === 0) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const getColumnIndexFn = listView ? () => 0 : apiRef.current.getColumnIndex;\n    const colIndexBefore = params.field ? getColumnIndexFn(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const visibleColumns = listView ? [(0, _gridListViewSelectors.gridListColumnSelector)(apiRef)] : (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef);\n    const lastColIndex = visibleColumns.length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? 'right' : 'left', 'down');\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === _constants.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && (colDef.field === _constants.GRID_TREE_DATA_GROUPING_FIELD || (0, _gridRowGroupingUtils.isGroupingColumn)(colDef.field))) {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, isRtl, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader, listView]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', handleCellKeyDown);\n};\nexports.useGridKeyboardNavigation = useGridKeyboardNavigation;","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","useGridKeyboardNavigation","React","_RtlProvider","_constants","_gridRowGroupingUtils","_gridColumnsSelector","_useGridLogger","_useGridEvent","_gridFilterSelector","_gridCheckboxSelectionColDef","_gridClasses","_gridEditRowModel","_keyboardUtils","_focus","_gridColumnGroupsSelector","_gridHeaderFilteringSelectors","_pipeProcessing","_domUtils","_utils","_gridListViewSelectors","_createSelector","_pagination","_gridRowsSelector","gridVisibleRowsWithPinnedRowsSelector","createSelectorMemoized","gridVisibleRowsSelector","gridPinnedRowsSelector","visibleRows","pinnedRows","top","concat","rows","bottom","apiRef","props","logger","useGridLogger","isRtl","useRtl","listView","getCurrentPageRows","useCallback","headerFilteringEnabled","signature","headerFilters","goToCell","colIndex","rowId","closestColumnToUse","rowSpanScanDirection","visibleSortedRows","gridExpandedSortedRowEntriesSelector","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","field","gridListColumnSelector","gridVisibleColumnFieldsSelector","nonRowSpannedRowId","findNonRowSpannedCell","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","setCellFocus","goToHeader","event","getVisibleColumns","setColumnHeaderFocus","goToHeaderFilter","setColumnHeaderFilterFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","gridClasses","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","GRID_CHECKBOX_SELECTION_COL_DEF","currentPageRows","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","length","lastRowIndexInPage","firstColIndex","lastColIndex","gridVisibleColumnDefinitionsSelector","columnGroupMaxDepth","gridColumnGroupsHeaderMaxDepthSelector","shouldPreventDefault","key","rightColIndex","getRightColumnIndex","currentColIndex","leftColIndex","getLeftColumnIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","handleHeaderFilterKeyDown","isEditing","gridHeaderFilteringEditFieldSelector","isHeaderMenuOpen","gridHeaderFilteringMenuSelector","isNavigationKey","handleColumnGroupHeaderKeyDown","focusedColumnGroup","gridFocusColumnGroupHeaderSelector","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","isEventTargetInPortal","cellParams","getCellParams","cellMode","GridCellModes","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","getColumnIndexFn","rowIndexBefore","visibleColumns","shiftKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","colDef","GRID_TREE_DATA_GROUPING_FIELD","isGroupingColumn","nextRowIndex","max","checkIfCanStartEditing","initialValue","useGridRegisterPipeProcessor","useGridEvent"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridKeyboardNavigation = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _constants = require(\"../../../internals/constants\");\nvar _gridRowGroupingUtils = require(\"../../../internals/utils/gridRowGroupingUtils\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridCheckboxSelectionColDef = require(\"../../../colDef/gridCheckboxSelectionColDef\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _focus = require(\"../focus\");\nvar _gridColumnGroupsSelector = require(\"../columnGrouping/gridColumnGroupsSelector\");\nvar _gridHeaderFilteringSelectors = require(\"../headerFiltering/gridHeaderFilteringSelectors\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _domUtils = require(\"../../../utils/domUtils\");\nvar _utils = require(\"./utils\");\nvar _gridListViewSelectors = require(\"../listView/gridListViewSelectors\");\nvar _createSelector = require(\"../../../utils/createSelector\");\nvar _pagination = require(\"../pagination\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nconst gridVisibleRowsWithPinnedRowsSelector = (0, _createSelector.createSelectorMemoized)(_pagination.gridVisibleRowsSelector, _gridRowsSelector.gridPinnedRowsSelector, (visibleRows, pinnedRows) => {\n  return (pinnedRows.top || []).concat(visibleRows.rows, pinnedRows.bottom || []);\n});\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nconst useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridKeyboardNavigation');\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const listView = props.listView;\n  const getCurrentPageRows = React.useCallback(() => {\n    return gridVisibleRowsWithPinnedRowsSelector(apiRef);\n  }, [apiRef]);\n  const headerFilteringEnabled = props.signature !== 'DataGrid' && props.headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {GridRowId} rowId index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * @param {string} rowSpanScanDirection Which direction to search to find the next cell not hidden by `rowSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left', rowSpanScanDirection = 'up') => {\n    const visibleSortedRows = (0, _gridFilterSelector.gridExpandedSortedRowEntriesSelector)(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    const field = listView ? (0, _gridListViewSelectors.gridListColumnSelector)(apiRef).field : (0, _gridColumnsSelector.gridVisibleColumnFieldsSelector)(apiRef)[colIndex];\n    const nonRowSpannedRowId = (0, _utils.findNonRowSpannedCell)(apiRef, rowId, field, rowSpanScanDirection);\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === nonRowSpannedRowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    apiRef.current.setCellFocus(nonRowSpannedRowId, field);\n  }, [apiRef, logger, listView]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return getCurrentPageRows()[rowIndex]?.id;\n  }, [getCurrentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${_gridClasses.gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== _gridCheckboxSelectionColDef.GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    const columnGroupMaxDepth = (0, _gridColumnGroupsSelector.gridColumnGroupsHeaderMaxDepthSelector)(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, isRtl, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const isEditing = (0, _gridHeaderFilteringSelectors.gridHeaderFilteringEditFieldSelector)(apiRef) === params.field;\n    const isHeaderMenuOpen = (0, _gridHeaderFilteringSelectors.gridHeaderFilteringMenuSelector)(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !(0, _keyboardUtils.isNavigationKey)(event.key)) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeaderFilter, isRtl, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const focusedColumnGroup = (0, _focus.gridFocusColumnGroupHeaderSelector)(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const currentPageRows = getCurrentPageRows();\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if ((0, _domUtils.isEventTargetInPortal)(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === _gridEditRowModel.GridCellModes.Edit || !(0, _keyboardUtils.isNavigationKey)(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const currentPageRows = getCurrentPageRows();\n    if (currentPageRows.length === 0) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const getColumnIndexFn = listView ? () => 0 : apiRef.current.getColumnIndex;\n    const colIndexBefore = params.field ? getColumnIndexFn(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const visibleColumns = listView ? [(0, _gridListViewSelectors.gridListColumnSelector)(apiRef)] : (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef);\n    const lastColIndex = visibleColumns.length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1), isRtl ? 'right' : 'left', 'down');\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = (0, _utils.getRightColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = (0, _utils.getLeftColumnIndex)({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            isRtl\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), isRtl ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === _constants.GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && (colDef.field === _constants.GRID_TREE_DATA_GROUPING_FIELD || (0, _gridRowGroupingUtils.isGroupingColumn)(colDef.field))) {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, getCurrentPageRows, isRtl, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader, listView]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', handleCellKeyDown);\n};\nexports.useGridKeyboardNavigation = useGridKeyboardNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}