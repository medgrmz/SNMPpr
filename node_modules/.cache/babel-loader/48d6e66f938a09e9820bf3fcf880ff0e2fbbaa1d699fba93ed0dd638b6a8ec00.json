{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridDataSourceBase = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _utils = require(\"@mui/utils\");\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _gridRowsUtils = require(\"../rows/gridRowsUtils\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _gridPaginationSelector = require(\"../pagination/gridPaginationSelector\");\nvar _gridDataSourceSelector = require(\"./gridDataSourceSelector\");\nvar _utils3 = require(\"./utils\");\nvar _cache = require(\"./cache\");\nvar _gridDataSourceError = require(\"./gridDataSourceError\");\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp, options = {}) {\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp ?? new _cache.GridDataSourceCacheDefault(options);\n}\nconst useGridDataSourceBase = (apiRef, props, options = {}) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(_strategyProcessing.GridStrategyGroup.DataSource, _utils3.DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = (0, _useGridSelector.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = (0, _useLazyRef.default)(() => {\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new _utils3.CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    const getRows = props.dataSource?.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== _gridRowsUtils.GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      options.fetchRowChildren?.([parentId]);\n      return;\n    }\n    options.clearDataSourceState?.();\n    const fetchParams = (0, _extends2.default)({}, (0, _gridDataSourceSelector.gridGetRowsParamsSelector)(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), params);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: _utils3.CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new _gridDataSourceError.GridGetRowsError({\n            message: originalError?.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, props.dataSource?.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(_strategyProcessing.GridStrategyGroup.DataSource) === _utils3.DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = props.dataSource?.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !(0, _isDeepEqual.isDeepEqual)(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new _gridDataSourceError.GridUpdateRowError({\n          message: errorThrown?.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        (0, _warning.warnOnce)(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => (0, _utils.unstable_debounce)(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: _utils3.DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};\nexports.useGridDataSourceBase = useGridDataSourceBase;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridDataSourceBase","_extends2","React","_useLazyRef","_utils","_warning","_isDeepEqual","_gridRowsUtils","_utils2","_strategyProcessing","_useGridSelector","_gridPaginationSelector","_gridDataSourceSelector","_utils3","_cache","_gridDataSourceError","noopCache","clear","get","undefined","set","getCache","cacheProp","options","GridDataSourceCacheDefault","apiRef","props","setStrategyAvailability","useCallback","current","GridStrategyGroup","DataSource","DataSourceRowsUpdateStrategy","Default","dataSource","defaultRowsUpdateStrategyActive","setDefaultRowsUpdateStrategyActive","useState","paginationModel","useGridSelector","gridPaginationModelSelector","lastRequestId","useRef","onDataSourceErrorProp","onDataSourceError","cacheChunkManager","sortedPageSizeOptions","pageSizeOptions","map","option","sort","a","b","cacheChunkSize","Math","min","pageSize","CacheChunkManager","cache","setCache","dataSourceCache","cacheOptions","fetchRows","parentId","params","getRows","GRID_ROOT_GROUP_ID","signature","fetchRowChildren","clearDataSourceState","fetchParams","gridGetRowsParamsSelector","unstable_applyPipeProcessors","cacheKeys","getCacheKeys","responses","cacheKey","every","response","applyStrategyProcessor","mergeResponses","getRowsCount","setLoading","requestId","getRowsResponse","cacheResponses","splitResponse","forEach","key","originalError","error","GridGetRowsError","message","cause","process","env","NODE_ENV","warnOnce","handleStrategyActivityChange","getActiveStrategy","handleDataUpdate","setRows","rowCount","setRowCount","rows","dataSourceUpdateRow","updateRow","handleEditRowOption","handleEditRow","editRow","finalRowUpdate","updateNestedRows","isDeepEqual","previousRow","errorThrown","GridUpdateRowError","dataSourceApi","debouncedFetchRows","useMemo","unstable_debounce","isFirstRender","useEffect","newCache","prevCache","api","public","strategyProcessor","strategyName","group","processor","events","strategyAvailabilityChange","sortModelChange","runIf","filterModelChange","paginationModelChange"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/dataSource/useGridDataSourceBase.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridDataSourceBase = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _utils = require(\"@mui/utils\");\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _gridRowsUtils = require(\"../rows/gridRowsUtils\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _gridPaginationSelector = require(\"../pagination/gridPaginationSelector\");\nvar _gridDataSourceSelector = require(\"./gridDataSourceSelector\");\nvar _utils3 = require(\"./utils\");\nvar _cache = require(\"./cache\");\nvar _gridDataSourceError = require(\"./gridDataSourceError\");\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp, options = {}) {\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp ?? new _cache.GridDataSourceCacheDefault(options);\n}\nconst useGridDataSourceBase = (apiRef, props, options = {}) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(_strategyProcessing.GridStrategyGroup.DataSource, _utils3.DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = (0, _useGridSelector.useGridSelector)(apiRef, _gridPaginationSelector.gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = (0, _useLazyRef.default)(() => {\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new _utils3.CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    const getRows = props.dataSource?.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== _gridRowsUtils.GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      options.fetchRowChildren?.([parentId]);\n      return;\n    }\n    options.clearDataSourceState?.();\n    const fetchParams = (0, _extends2.default)({}, (0, _gridDataSourceSelector.gridGetRowsParamsSelector)(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), params);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: _utils3.CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new _gridDataSourceError.GridGetRowsError({\n            message: originalError?.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, props.dataSource?.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(_strategyProcessing.GridStrategyGroup.DataSource) === _utils3.DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = props.dataSource?.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !(0, _isDeepEqual.isDeepEqual)(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new _gridDataSourceError.GridUpdateRowError({\n          message: errorThrown?.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        (0, _warning.warnOnce)(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => (0, _utils.unstable_debounce)(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: _utils3.DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: (0, _utils2.runIf)(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};\nexports.useGridDataSourceBase = useGridDataSourceBase;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}