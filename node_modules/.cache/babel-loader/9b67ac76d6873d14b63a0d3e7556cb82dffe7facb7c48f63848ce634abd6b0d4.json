{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPipeProcessing = void 0;\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.requestPipeProcessorsApplication` is called for the given group.\n */\nconst useGridPipeProcessing = apiRef => {\n  const cache = React.useRef({});\n  const isRunning = React.useRef(false);\n  const runAppliers = React.useCallback(groupCache => {\n    if (isRunning.current || !groupCache) {\n      return;\n    }\n    isRunning.current = true;\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n    isRunning.current = false;\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    const groupCache = cache.current[group];\n    const oldProcessor = groupCache.processors.get(id);\n    if (oldProcessor !== processor) {\n      groupCache.processors.set(id, processor);\n      groupCache.processorsAsArray = Array.from(cache.current[group].processors.values());\n      runAppliers(groupCache);\n    }\n    return () => {\n      cache.current[group].processors.delete(id);\n      cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values());\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    cache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = cache.current[group].appliers,\n        otherAppliers = (0, _objectWithoutPropertiesLoose2.default)(_appliers, [id].map(_toPropertyKey2.default));\n      cache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    runAppliers(cache.current[group]);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback((...args) => {\n    const [group, value, context] = args;\n    if (!cache.current[group]) {\n      return value;\n    }\n    const processors = cache.current[group].processorsAsArray;\n    let result = value;\n    for (let i = 0; i < processors.length; i += 1) {\n      result = processors[i](result, context);\n    }\n    return result;\n  }, []);\n  const preProcessingPrivateApi = {\n    registerPipeProcessor,\n    registerPipeApplier,\n    requestPipeProcessorsApplication\n  };\n  const preProcessingPublicApi = {\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, preProcessingPrivateApi, 'private');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, preProcessingPublicApi, 'public');\n};\nexports.useGridPipeProcessing = useGridPipeProcessing;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridPipeProcessing","_objectWithoutPropertiesLoose2","_toPropertyKey2","React","_useGridApiMethod","apiRef","cache","useRef","isRunning","runAppliers","useCallback","groupCache","current","values","appliers","forEach","callback","registerPipeProcessor","group","id","processor","processors","Map","processorsAsArray","oldProcessor","get","set","Array","from","delete","registerPipeApplier","applier","_appliers","otherAppliers","map","requestPipeProcessorsApplication","applyPipeProcessors","args","context","result","i","length","preProcessingPrivateApi","preProcessingPublicApi","unstable_applyPipeProcessors","useGridApiMethod"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPipeProcessing = void 0;\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.requestPipeProcessorsApplication` is called for the given group.\n */\nconst useGridPipeProcessing = apiRef => {\n  const cache = React.useRef({});\n  const isRunning = React.useRef(false);\n  const runAppliers = React.useCallback(groupCache => {\n    if (isRunning.current || !groupCache) {\n      return;\n    }\n    isRunning.current = true;\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n    isRunning.current = false;\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    const groupCache = cache.current[group];\n    const oldProcessor = groupCache.processors.get(id);\n    if (oldProcessor !== processor) {\n      groupCache.processors.set(id, processor);\n      groupCache.processorsAsArray = Array.from(cache.current[group].processors.values());\n      runAppliers(groupCache);\n    }\n    return () => {\n      cache.current[group].processors.delete(id);\n      cache.current[group].processorsAsArray = Array.from(cache.current[group].processors.values());\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!cache.current[group]) {\n      cache.current[group] = {\n        processors: new Map(),\n        processorsAsArray: [],\n        appliers: {}\n      };\n    }\n    cache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = cache.current[group].appliers,\n        otherAppliers = (0, _objectWithoutPropertiesLoose2.default)(_appliers, [id].map(_toPropertyKey2.default));\n      cache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    runAppliers(cache.current[group]);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback((...args) => {\n    const [group, value, context] = args;\n    if (!cache.current[group]) {\n      return value;\n    }\n    const processors = cache.current[group].processorsAsArray;\n    let result = value;\n    for (let i = 0; i < processors.length; i += 1) {\n      result = processors[i](result, context);\n    }\n    return result;\n  }, []);\n  const preProcessingPrivateApi = {\n    registerPipeProcessor,\n    registerPipeApplier,\n    requestPipeProcessorsApplication\n  };\n  const preProcessingPublicApi = {\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, preProcessingPrivateApi, 'private');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, preProcessingPublicApi, 'public');\n};\nexports.useGridPipeProcessing = useGridPipeProcessing;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}