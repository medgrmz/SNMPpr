{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clamp = void 0;\nexports.createRandomNumberGenerator = createRandomNumberGenerator;\nexports.deepClone = deepClone;\nexports.escapeRegExp = escapeRegExp;\nexports.eslintUseValue = eslintUseValue;\nexports.isFunction = isFunction;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.localStorageAvailable = localStorageAvailable;\nexports.range = range;\nexports.runIf = void 0;\nfunction isNumber(value) {\n  return typeof value === 'number' && !Number.isNaN(value);\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nfunction isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\nfunction localStorageAvailable() {\n  try {\n    // Incognito mode might reject access to the localStorage for security reasons.\n    // window isn't defined on Node.js\n    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available\n    const key = '__some_random_key_you_are_not_going_to_use__';\n    window.localStorage.setItem(key, key);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction escapeRegExp(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Follows the CSS specification behavior for min and max\n * If min > max, then the min have priority\n */\nconst clamp = (value, min, max) => Math.max(min, Math.min(max, value));\n\n/**\n * Create an array containing the range [from, to[\n */\nexports.clamp = clamp;\nfunction range(from, to) {\n  return Array.from({\n    length: to - from\n  }).map((_, i) => from + i);\n}\n\n// Pseudo random number. See https://stackoverflow.com/a/47593316\nfunction mulberry32(a) {\n  return () => {\n    /* eslint-disable */\n    let t = a += 0x6d2b79f5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    /* eslint-enable */\n  };\n}\n\n/**\n * Create a random number generator from a seed. The seed\n * ensures that the random number generator produces the\n * same sequence of 'random' numbers on every render. It\n * returns a function that generates a random number between\n * a specified min and max.\n */\nfunction createRandomNumberGenerator(seed) {\n  const random = mulberry32(seed);\n  return (min, max) => min + (max - min) * random();\n}\nfunction deepClone(obj) {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(obj);\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Mark a value as used so eslint doesn't complain. Use this instead\n * of a `eslint-disable-next-line react-hooks/exhaustive-deps` because\n * that hint disables checks on all values instead of just one.\n */\nfunction eslintUseValue(_) {}\nconst runIf = (condition, fn) => params => {\n  if (condition) {\n    fn(params);\n  }\n};\nexports.runIf = runIf;","map":{"version":3,"names":["Object","defineProperty","exports","value","clamp","createRandomNumberGenerator","deepClone","escapeRegExp","eslintUseValue","isFunction","isNumber","isObject","localStorageAvailable","range","runIf","Number","isNaN","key","window","localStorage","setItem","removeItem","err","replace","min","max","Math","from","to","Array","length","map","_","i","mulberry32","a","t","imul","seed","random","obj","structuredClone","JSON","parse","stringify","condition","fn","params"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/utils/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clamp = void 0;\nexports.createRandomNumberGenerator = createRandomNumberGenerator;\nexports.deepClone = deepClone;\nexports.escapeRegExp = escapeRegExp;\nexports.eslintUseValue = eslintUseValue;\nexports.isFunction = isFunction;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.localStorageAvailable = localStorageAvailable;\nexports.range = range;\nexports.runIf = void 0;\nfunction isNumber(value) {\n  return typeof value === 'number' && !Number.isNaN(value);\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nfunction isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\nfunction localStorageAvailable() {\n  try {\n    // Incognito mode might reject access to the localStorage for security reasons.\n    // window isn't defined on Node.js\n    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available\n    const key = '__some_random_key_you_are_not_going_to_use__';\n    window.localStorage.setItem(key, key);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction escapeRegExp(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Follows the CSS specification behavior for min and max\n * If min > max, then the min have priority\n */\nconst clamp = (value, min, max) => Math.max(min, Math.min(max, value));\n\n/**\n * Create an array containing the range [from, to[\n */\nexports.clamp = clamp;\nfunction range(from, to) {\n  return Array.from({\n    length: to - from\n  }).map((_, i) => from + i);\n}\n\n// Pseudo random number. See https://stackoverflow.com/a/47593316\nfunction mulberry32(a) {\n  return () => {\n    /* eslint-disable */\n    let t = a += 0x6d2b79f5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    /* eslint-enable */\n  };\n}\n\n/**\n * Create a random number generator from a seed. The seed\n * ensures that the random number generator produces the\n * same sequence of 'random' numbers on every render. It\n * returns a function that generates a random number between\n * a specified min and max.\n */\nfunction createRandomNumberGenerator(seed) {\n  const random = mulberry32(seed);\n  return (min, max) => min + (max - min) * random();\n}\nfunction deepClone(obj) {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(obj);\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Mark a value as used so eslint doesn't complain. Use this instead\n * of a `eslint-disable-next-line react-hooks/exhaustive-deps` because\n * that hint disables checks on all values instead of just one.\n */\nfunction eslintUseValue(_) {}\nconst runIf = (condition, fn) => params => {\n  if (condition) {\n    fn(params);\n  }\n};\nexports.runIf = runIf;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}