{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowsMeta = exports.rowsMetaStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _utils = require(\"@mui/utils\");\nvar _ResizeObserver = require(\"../../../utils/ResizeObserver\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _densitySelector = require(\"../density/densitySelector\");\nvar _gridPaginationSelector = require(\"../pagination/gridPaginationSelector\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridRowsSelector = require(\"./gridRowsSelector\");\nvar _gridDimensionsSelectors = require(\"../dimensions/gridDimensionsSelectors\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nvar _gridFocusedVirtualCellSelector = require(\"../virtualization/gridFocusedVirtualCellSelector\");\n/* eslint-disable no-underscore-dangle */\n\nconst rowsMetaStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowsMeta = {\n    heights: new Map()\n  };\n  const baseRowHeight = (0, _gridDimensionsSelectors.gridRowHeightSelector)(apiRef);\n  const dataRowCount = (0, _gridRowsSelector.gridRowCountSelector)(apiRef);\n  const pagination = (0, _gridPaginationSelector.gridPaginationSelector)(apiRef);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  return (0, _extends2.default)({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: rowCount * baseRowHeight,\n      positions: Array.from({\n        length: rowCount\n      }, (_, i) => i * baseRowHeight),\n      pinnedTopRowsTotalHeight: 0,\n      pinnedBottomRowsTotalHeight: 0\n    }\n  });\n};\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexports.rowsMetaStateInitializer = rowsMetaStateInitializer;\nconst useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const heightCache = apiRef.current.caches.rowsMeta.heights;\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const isHeightMetaValid = React.useRef(false);\n  const densityFactor = (0, _useGridSelector.useGridSelector)(apiRef, _densitySelector.gridDensityFactorSelector);\n  const currentPage = (0, _useGridVisibleRows.useGridVisibleRows)(apiRef, props);\n  const pinnedRows = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridPinnedRowsSelector);\n  const rowHeight = (0, _useGridSelector.useGridSelector)(apiRef, _gridDimensionsSelectors.gridRowHeightSelector);\n  const getRowHeightEntry = rowId => {\n    let entry = heightCache.get(rowId);\n    if (entry === undefined) {\n      entry = {\n        content: rowHeight,\n        spacingTop: 0,\n        spacingBottom: 0,\n        detail: 0,\n        autoHeight: false,\n        needsFirstMeasurement: true\n      };\n      heightCache.set(rowId, entry);\n    }\n    return entry;\n  };\n  const processHeightEntry = React.useCallback(row => {\n    // HACK: rowHeight trails behind the most up-to-date value just enough to\n    // mess the initial rowsMeta hydration :/\n    const baseRowHeight = (0, _gridDimensionsSelectors.gridDimensionsSelector)(apiRef).rowHeight;\n    (0, _utils2.eslintUseValue)(rowHeight);\n    const entry = apiRef.current.getRowHeightEntry(row.id);\n    if (!getRowHeightProp) {\n      entry.content = baseRowHeight;\n      entry.needsFirstMeasurement = false;\n    } else {\n      const rowHeightFromUser = getRowHeightProp((0, _extends2.default)({}, row, {\n        densityFactor\n      }));\n      if (rowHeightFromUser === 'auto') {\n        if (entry.needsFirstMeasurement) {\n          const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight((0, _extends2.default)({}, row, {\n            densityFactor\n          })) : baseRowHeight;\n\n          // If the row was not measured yet use the estimated row height\n          entry.content = estimatedRowHeight ?? baseRowHeight;\n        }\n        hasRowWithAutoHeight.current = true;\n        entry.autoHeight = true;\n      } else {\n        // Default back to base rowHeight if getRowHeight returns invalid value.\n        entry.content = (0, _gridRowsUtils.getValidRowHeight)(rowHeightFromUser, baseRowHeight, _gridRowsUtils.getRowHeightWarning);\n        entry.needsFirstMeasurement = false;\n        entry.autoHeight = false;\n      }\n    }\n    if (getRowSpacing) {\n      const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n      const spacing = getRowSpacing((0, _extends2.default)({}, row, {\n        isFirstVisible: indexRelativeToCurrentPage === 0,\n        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n        indexRelativeToCurrentPage\n      }));\n      entry.spacingTop = spacing.top ?? 0;\n      entry.spacingBottom = spacing.bottom ?? 0;\n    } else {\n      entry.spacingTop = 0;\n      entry.spacingBottom = 0;\n    }\n    apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row);\n    return entry;\n  }, [apiRef, currentPage.rows, getRowHeightProp, getEstimatedRowHeight, rowHeight, getRowSpacing, densityFactor]);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const pinnedTopRowsTotalHeight = pinnedRows.top.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0);\n    const pinnedBottomRowsTotalHeight = pinnedRows.bottom.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0);\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      const entry = processHeightEntry(row);\n      const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n      return acc + total;\n    }, 0);\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    const didHeightsChange = pinnedTopRowsTotalHeight !== apiRef.current.state.rowsMeta.pinnedTopRowsTotalHeight || pinnedBottomRowsTotalHeight !== apiRef.current.state.rowsMeta.pinnedBottomRowsTotalHeight || currentPageTotalHeight !== apiRef.current.state.rowsMeta.currentPageTotalHeight;\n    const rowsMeta = {\n      currentPageTotalHeight,\n      positions,\n      pinnedTopRowsTotalHeight,\n      pinnedBottomRowsTotalHeight\n    };\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        rowsMeta\n      });\n    });\n    if (didHeightsChange) {\n      apiRef.current.updateDimensions();\n    }\n    isHeightMetaValid.current = true;\n  }, [apiRef, pinnedRows, currentPage.rows, processHeightEntry]);\n  const getRowHeight = rowId => {\n    return heightCache.get(rowId)?.content ?? rowHeight;\n  };\n  const storeRowHeightMeasurement = (id, height) => {\n    const entry = apiRef.current.getRowHeightEntry(id);\n    const didChange = entry.content !== height;\n    entry.needsFirstMeasurement = false;\n    entry.content = height;\n    isHeightMetaValid.current && (isHeightMetaValid.current = !didChange);\n  };\n  const rowHasAutoHeight = id => {\n    return heightCache.get(id)?.autoHeight ?? false;\n  };\n  const getLastMeasuredRowIndex = () => {\n    return lastMeasuredRowIndex.current;\n  };\n  const setLastMeasuredRowIndex = index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  };\n  const resetRowHeights = () => {\n    heightCache.clear();\n    hydrateRowsMeta();\n  };\n  const resizeObserver = (0, _useLazyRef.default)(() => new _ResizeObserver.ResizeObserver(entries => {\n    for (let i = 0; i < entries.length; i += 1) {\n      const entry = entries[i];\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      const rowId = entry.target.__mui_id;\n      const focusedVirtualRowId = (0, _gridFocusedVirtualCellSelector.gridFocusedVirtualCellSelector)(apiRef)?.id;\n      if (focusedVirtualRowId === rowId && height === 0) {\n        // Focused virtual row has 0 height.\n        // We don't want to store it to avoid scroll jumping.\n        // https://github.com/mui/mui-x/issues/14726\n        return;\n      }\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    }\n    if (!isHeightMetaValid.current) {\n      apiRef.current.requestPipeProcessorsApplication('rowHeight');\n    }\n  })).current;\n  const observeRowHeight = (element, rowId) => {\n    element.__mui_id = rowId;\n    resizeObserver.observe(element);\n    return () => resizeObserver.unobserve(element);\n  };\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'rowHeight', hydrateRowsMeta);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  (0, _utils.unstable_useEnhancedEffect)(() => {\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getRowHeight,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_storeRowHeightMeasurement: storeRowHeightMeasurement,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    hydrateRowsMeta,\n    observeRowHeight,\n    rowHasAutoHeight,\n    getRowHeightEntry,\n    getLastMeasuredRowIndex\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowsMetaApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowsMetaPrivateApi, 'private');\n};\nexports.useGridRowsMeta = useGridRowsMeta;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridRowsMeta","rowsMetaStateInitializer","_extends2","React","_useLazyRef","_utils","_ResizeObserver","_useGridVisibleRows","_utils2","_useGridApiMethod","_useGridSelector","_densitySelector","_gridPaginationSelector","_pipeProcessing","_gridRowsSelector","_gridDimensionsSelectors","_gridRowsUtils","_gridFocusedVirtualCellSelector","state","props","apiRef","current","caches","rowsMeta","heights","Map","baseRowHeight","gridRowHeightSelector","dataRowCount","gridRowCountSelector","pagination","gridPaginationSelector","rowCount","Math","min","enabled","paginationModel","pageSize","currentPageTotalHeight","positions","Array","from","length","_","i","pinnedTopRowsTotalHeight","pinnedBottomRowsTotalHeight","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","heightCache","lastMeasuredRowIndex","useRef","hasRowWithAutoHeight","isHeightMetaValid","densityFactor","useGridSelector","gridDensityFactorSelector","currentPage","useGridVisibleRows","pinnedRows","gridPinnedRowsSelector","rowHeight","getRowHeightEntry","rowId","entry","get","undefined","content","spacingTop","spacingBottom","detail","autoHeight","needsFirstMeasurement","set","processHeightEntry","useCallback","row","gridDimensionsSelector","eslintUseValue","id","rowHeightFromUser","estimatedRowHeight","getValidRowHeight","getRowHeightWarning","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","top","bottom","unstable_applyPipeProcessors","hydrateRowsMeta","reduce","acc","push","total","Infinity","didHeightsChange","setState","updateDimensions","storeRowHeightMeasurement","height","didChange","rowHasAutoHeight","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","clear","resizeObserver","ResizeObserver","entries","borderBoxSize","blockSize","contentRect","target","__mui_id","focusedVirtualRowId","gridFocusedVirtualCellSelector","unstable_storeRowHeightMeasurement","requestPipeProcessorsApplication","observeRowHeight","element","observe","unobserve","useGridRegisterPipeApplier","unstable_useEnhancedEffect","rowsMetaApi","unstable_getRowHeight","unstable_setLastMeasuredRowIndex","rowsMetaPrivateApi","useGridApiMethod"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowsMeta = exports.rowsMetaStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLazyRef = _interopRequireDefault(require(\"@mui/utils/useLazyRef\"));\nvar _utils = require(\"@mui/utils\");\nvar _ResizeObserver = require(\"../../../utils/ResizeObserver\");\nvar _useGridVisibleRows = require(\"../../utils/useGridVisibleRows\");\nvar _utils2 = require(\"../../../utils/utils\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridSelector = require(\"../../utils/useGridSelector\");\nvar _densitySelector = require(\"../density/densitySelector\");\nvar _gridPaginationSelector = require(\"../pagination/gridPaginationSelector\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridRowsSelector = require(\"./gridRowsSelector\");\nvar _gridDimensionsSelectors = require(\"../dimensions/gridDimensionsSelectors\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nvar _gridFocusedVirtualCellSelector = require(\"../virtualization/gridFocusedVirtualCellSelector\");\n/* eslint-disable no-underscore-dangle */\n\nconst rowsMetaStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rowsMeta = {\n    heights: new Map()\n  };\n  const baseRowHeight = (0, _gridDimensionsSelectors.gridRowHeightSelector)(apiRef);\n  const dataRowCount = (0, _gridRowsSelector.gridRowCountSelector)(apiRef);\n  const pagination = (0, _gridPaginationSelector.gridPaginationSelector)(apiRef);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  return (0, _extends2.default)({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: rowCount * baseRowHeight,\n      positions: Array.from({\n        length: rowCount\n      }, (_, i) => i * baseRowHeight),\n      pinnedTopRowsTotalHeight: 0,\n      pinnedBottomRowsTotalHeight: 0\n    }\n  });\n};\n\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexports.rowsMetaStateInitializer = rowsMetaStateInitializer;\nconst useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const heightCache = apiRef.current.caches.rowsMeta.heights;\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const isHeightMetaValid = React.useRef(false);\n  const densityFactor = (0, _useGridSelector.useGridSelector)(apiRef, _densitySelector.gridDensityFactorSelector);\n  const currentPage = (0, _useGridVisibleRows.useGridVisibleRows)(apiRef, props);\n  const pinnedRows = (0, _useGridSelector.useGridSelector)(apiRef, _gridRowsSelector.gridPinnedRowsSelector);\n  const rowHeight = (0, _useGridSelector.useGridSelector)(apiRef, _gridDimensionsSelectors.gridRowHeightSelector);\n  const getRowHeightEntry = rowId => {\n    let entry = heightCache.get(rowId);\n    if (entry === undefined) {\n      entry = {\n        content: rowHeight,\n        spacingTop: 0,\n        spacingBottom: 0,\n        detail: 0,\n        autoHeight: false,\n        needsFirstMeasurement: true\n      };\n      heightCache.set(rowId, entry);\n    }\n    return entry;\n  };\n  const processHeightEntry = React.useCallback(row => {\n    // HACK: rowHeight trails behind the most up-to-date value just enough to\n    // mess the initial rowsMeta hydration :/\n    const baseRowHeight = (0, _gridDimensionsSelectors.gridDimensionsSelector)(apiRef).rowHeight;\n    (0, _utils2.eslintUseValue)(rowHeight);\n    const entry = apiRef.current.getRowHeightEntry(row.id);\n    if (!getRowHeightProp) {\n      entry.content = baseRowHeight;\n      entry.needsFirstMeasurement = false;\n    } else {\n      const rowHeightFromUser = getRowHeightProp((0, _extends2.default)({}, row, {\n        densityFactor\n      }));\n      if (rowHeightFromUser === 'auto') {\n        if (entry.needsFirstMeasurement) {\n          const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight((0, _extends2.default)({}, row, {\n            densityFactor\n          })) : baseRowHeight;\n\n          // If the row was not measured yet use the estimated row height\n          entry.content = estimatedRowHeight ?? baseRowHeight;\n        }\n        hasRowWithAutoHeight.current = true;\n        entry.autoHeight = true;\n      } else {\n        // Default back to base rowHeight if getRowHeight returns invalid value.\n        entry.content = (0, _gridRowsUtils.getValidRowHeight)(rowHeightFromUser, baseRowHeight, _gridRowsUtils.getRowHeightWarning);\n        entry.needsFirstMeasurement = false;\n        entry.autoHeight = false;\n      }\n    }\n    if (getRowSpacing) {\n      const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n      const spacing = getRowSpacing((0, _extends2.default)({}, row, {\n        isFirstVisible: indexRelativeToCurrentPage === 0,\n        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n        indexRelativeToCurrentPage\n      }));\n      entry.spacingTop = spacing.top ?? 0;\n      entry.spacingBottom = spacing.bottom ?? 0;\n    } else {\n      entry.spacingTop = 0;\n      entry.spacingBottom = 0;\n    }\n    apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row);\n    return entry;\n  }, [apiRef, currentPage.rows, getRowHeightProp, getEstimatedRowHeight, rowHeight, getRowSpacing, densityFactor]);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    const pinnedTopRowsTotalHeight = pinnedRows.top.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0);\n    const pinnedBottomRowsTotalHeight = pinnedRows.bottom.reduce((acc, row) => {\n      const entry = processHeightEntry(row);\n      return acc + entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n    }, 0);\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      const entry = processHeightEntry(row);\n      const total = entry.content + entry.spacingTop + entry.spacingBottom + entry.detail;\n      return acc + total;\n    }, 0);\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    const didHeightsChange = pinnedTopRowsTotalHeight !== apiRef.current.state.rowsMeta.pinnedTopRowsTotalHeight || pinnedBottomRowsTotalHeight !== apiRef.current.state.rowsMeta.pinnedBottomRowsTotalHeight || currentPageTotalHeight !== apiRef.current.state.rowsMeta.currentPageTotalHeight;\n    const rowsMeta = {\n      currentPageTotalHeight,\n      positions,\n      pinnedTopRowsTotalHeight,\n      pinnedBottomRowsTotalHeight\n    };\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        rowsMeta\n      });\n    });\n    if (didHeightsChange) {\n      apiRef.current.updateDimensions();\n    }\n    isHeightMetaValid.current = true;\n  }, [apiRef, pinnedRows, currentPage.rows, processHeightEntry]);\n  const getRowHeight = rowId => {\n    return heightCache.get(rowId)?.content ?? rowHeight;\n  };\n  const storeRowHeightMeasurement = (id, height) => {\n    const entry = apiRef.current.getRowHeightEntry(id);\n    const didChange = entry.content !== height;\n    entry.needsFirstMeasurement = false;\n    entry.content = height;\n    isHeightMetaValid.current && (isHeightMetaValid.current = !didChange);\n  };\n  const rowHasAutoHeight = id => {\n    return heightCache.get(id)?.autoHeight ?? false;\n  };\n  const getLastMeasuredRowIndex = () => {\n    return lastMeasuredRowIndex.current;\n  };\n  const setLastMeasuredRowIndex = index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  };\n  const resetRowHeights = () => {\n    heightCache.clear();\n    hydrateRowsMeta();\n  };\n  const resizeObserver = (0, _useLazyRef.default)(() => new _ResizeObserver.ResizeObserver(entries => {\n    for (let i = 0; i < entries.length; i += 1) {\n      const entry = entries[i];\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      const rowId = entry.target.__mui_id;\n      const focusedVirtualRowId = (0, _gridFocusedVirtualCellSelector.gridFocusedVirtualCellSelector)(apiRef)?.id;\n      if (focusedVirtualRowId === rowId && height === 0) {\n        // Focused virtual row has 0 height.\n        // We don't want to store it to avoid scroll jumping.\n        // https://github.com/mui/mui-x/issues/14726\n        return;\n      }\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    }\n    if (!isHeightMetaValid.current) {\n      apiRef.current.requestPipeProcessorsApplication('rowHeight');\n    }\n  })).current;\n  const observeRowHeight = (element, rowId) => {\n    element.__mui_id = rowId;\n    resizeObserver.observe(element);\n    return () => resizeObserver.unobserve(element);\n  };\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'rowHeight', hydrateRowsMeta);\n\n  // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n  (0, _utils.unstable_useEnhancedEffect)(() => {\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getRowHeight,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_storeRowHeightMeasurement: storeRowHeightMeasurement,\n    resetRowHeights\n  };\n  const rowsMetaPrivateApi = {\n    hydrateRowsMeta,\n    observeRowHeight,\n    rowHasAutoHeight,\n    getRowHeightEntry,\n    getLastMeasuredRowIndex\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowsMetaApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, rowsMetaPrivateApi, 'private');\n};\nexports.useGridRowsMeta = useGridRowsMeta;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}