{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.columnsStateInitializer = void 0;\nexports.useGridColumns = useGridColumns;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridColumnsSelector = require(\"./gridColumnsSelector\");\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridColumnsInterfaces = require(\"./gridColumnsInterfaces\");\nvar _gridColumnsUtils = require(\"./gridColumnsUtils\");\nvar _preferencesPanel = require(\"../preferencesPanel\");\nvar _pivoting = require(\"../pivoting\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nconst columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return (0, _extends2.default)({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? _gridColumnsInterfaces.EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexports.columnsStateInitializer = columnsStateInitializer;\nfunction useGridColumns(apiRef, props) {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: _gridColumnsSelector.gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef) : (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return (0, _gridColumnsSelector.gridColumnPositionsSelector)(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        columns: (0, _gridColumnsUtils.createColumnsState)({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = (0, _extends2.default)({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState((0, _extends2.default)({}, (0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = (0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = (0, _extends2.default)({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState((0, _gridColumnsUtils.hydrateColumnsWidth)((0, _extends2.default)({}, columnsState, {\n      lookup: (0, _extends2.default)({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, columnApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, columnReorderApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        _gridColumnsUtils.COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === _preferencesPanel.GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColumnsPanel, (0, _extends2.default)({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = (0, _pivoting.gridPivotActiveSelector)(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuItems);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState((0, _gridColumnsUtils.hydrateColumnsWidth)((0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => (0, _extends2.default)({}, state, {\n    columns: columnsState\n  });\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","columnsStateInitializer","useGridColumns","_extends2","React","_useGridApiMethod","_useGridLogger","_gridColumnsSelector","_signature","_useGridEvent","_pipeProcessing","_gridColumnsInterfaces","_gridColumnsUtils","_preferencesPanel","_pivoting","_jsxRuntime","state","props","apiRef","columnsState","createColumnsState","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","pinnedColumns","EMPTY_PINNED_COLUMN_FIELDS","logger","useGridLogger","previousColumnsProp","useRef","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","gridColumnVisibilityModelSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","mergeColumnsState","publishEvent","orderedFields","getColumn","field","gridColumnLookupSelector","getAllColumns","gridColumnDefinitionsSelector","getVisibleColumns","gridVisibleColumnDefinitionsSelector","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","gridColumnPositionsSelector","setColumnVisibilityModel","model","currentModel","undefined","updateRenderContext","updateColumns","gridPivotActiveSelector","updateNonPivotColumns","updateInitialVisibilityModel","setColumnVisibility","isVisible","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","gridColumnFieldsSelector","setColumnIndex","targetIndexPosition","oldIndexPosition","updatedColumns","fieldRemoved","splice","gridColumnsStateSelector","params","column","targetIndex","oldIndex","setColumnWidth","width","lookup","newColumn","hasBeenResized","hydrateColumnsWidth","getRootDimensions","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","useGridApiMethod","signature","GridSignature","DataGrid","stateExportPreProcessing","prevState","context","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","keys","length","dimensions","forEach","colDefDimensions","COLUMNS_DIMENSION_PROPERTIES","propertyName","propertyValue","Infinity","stateRestorePreProcessing","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","GridPreferencePanelsValue","ColumnsPanel","slots","columnsPanel","jsx","slotProps","addColumnMenuItems","columnMenuItems","isPivotActive","disableColumnSelector","useGridRegisterPipeProcessor","prevInnerWidth","handleGridSizeChange","size","hasFlexColumns","some","flex","useGridEvent","hydrateColumns","info","useGridRegisterPipeApplier","isFirstRender","useEffect"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.columnsStateInitializer = void 0;\nexports.useGridColumns = useGridColumns;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridColumnsSelector = require(\"./gridColumnsSelector\");\nvar _signature = require(\"../../../constants/signature\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridColumnsInterfaces = require(\"./gridColumnsInterfaces\");\nvar _gridColumnsUtils = require(\"./gridColumnsUtils\");\nvar _preferencesPanel = require(\"../preferencesPanel\");\nvar _pivoting = require(\"../pivoting\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nconst columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return (0, _extends2.default)({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? _gridColumnsInterfaces.EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexports.columnsStateInitializer = columnsStateInitializer;\nfunction useGridColumns(apiRef, props) {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: _gridColumnsSelector.gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef) : (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return (0, _gridColumnsSelector.gridColumnPositionsSelector)(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        columns: (0, _gridColumnsUtils.createColumnsState)({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if ((0, _pivoting.gridPivotActiveSelector)(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = (0, _extends2.default)({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState((0, _extends2.default)({}, (0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = (0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = (0, _extends2.default)({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState((0, _gridColumnsUtils.hydrateColumnsWidth)((0, _extends2.default)({}, columnsState, {\n      lookup: (0, _extends2.default)({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, columnApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, columnReorderApi, props.signature === _signature.GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = (0, _gridColumnsSelector.gridColumnFieldsSelector)(apiRef);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        _gridColumnsUtils.COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === _preferencesPanel.GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColumnsPanel, (0, _extends2.default)({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = (0, _pivoting.gridPivotActiveSelector)(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuItems);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = (0, _gridColumnsSelector.gridVisibleColumnDefinitionsSelector)(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState((0, _gridColumnsUtils.hydrateColumnsWidth)((0, _gridColumnsSelector.gridColumnsStateSelector)(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  (0, _pipeProcessing.useGridRegisterPipeApplier)(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = (0, _gridColumnsUtils.createColumnsState)({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => (0, _extends2.default)({}, state, {\n    columns: columnsState\n  });\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9F,IAAIC,sBAAsB,GAAGF,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAC5FE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxCF,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,IAAIC,SAAS,GAAGP,sBAAsB,CAACF,OAAO,CAAC,gCAAgC,CAAC,CAAC;AACjF,IAAIU,KAAK,GAAGX,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD,IAAIW,iBAAiB,GAAGX,OAAO,CAAC,8BAA8B,CAAC;AAC/D,IAAIY,cAAc,GAAGZ,OAAO,CAAC,2BAA2B,CAAC;AACzD,IAAIa,oBAAoB,GAAGb,OAAO,CAAC,uBAAuB,CAAC;AAC3D,IAAIc,UAAU,GAAGd,OAAO,CAAC,8BAA8B,CAAC;AACxD,IAAIe,aAAa,GAAGf,OAAO,CAAC,0BAA0B,CAAC;AACvD,IAAIgB,eAAe,GAAGhB,OAAO,CAAC,2BAA2B,CAAC;AAC1D,IAAIiB,sBAAsB,GAAGjB,OAAO,CAAC,yBAAyB,CAAC;AAC/D,IAAIkB,iBAAiB,GAAGlB,OAAO,CAAC,oBAAoB,CAAC;AACrD,IAAImB,iBAAiB,GAAGnB,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIoB,SAAS,GAAGpB,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIqB,WAAW,GAAGrB,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMO,uBAAuB,GAAGA,CAACe,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;EACxD,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,kBAAkB,EAAE;IAC7DF,MAAM;IACNG,eAAe,EAAEJ,KAAK,CAACK,OAAO;IAC9BC,YAAY,EAAEN,KAAK,CAACM,YAAY,EAAED,OAAO;IACzCE,qBAAqB,EAAEP,KAAK,CAACO,qBAAqB,IAAIP,KAAK,CAACM,YAAY,EAAED,OAAO,EAAEE,qBAAqB,IAAI,CAAC,CAAC;IAC9GC,uBAAuB,EAAE;EAC3B,CAAC,CAAC;EACF,OAAO,CAAC,CAAC,EAAEtB,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEqB,KAAK,EAAE;IACvCM,OAAO,EAAEH,YAAY;IACrB;IACA;IACAO,aAAa,EAAEV,KAAK,CAACU,aAAa,IAAIf,sBAAsB,CAACgB;EAC/D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA5B,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB;AACzD,SAASC,cAAcA,CAACgB,MAAM,EAAED,KAAK,EAAE;EACrC,MAAMW,MAAM,GAAG,CAAC,CAAC,EAAEtB,cAAc,CAACuB,aAAa,EAAEX,MAAM,EAAE,gBAAgB,CAAC;EAC1E,MAAMY,mBAAmB,GAAG1B,KAAK,CAAC2B,MAAM,CAACd,KAAK,CAACK,OAAO,CAAC;EACvDJ,MAAM,CAACc,OAAO,CAACC,oBAAoB,CAAC;IAClCC,OAAO,EAAE,gBAAgB;IACzBC,SAAS,EAAElB,KAAK,CAACO,qBAAqB;IACtCY,YAAY,EAAEnB,KAAK,CAACoB,6BAA6B;IACjDC,aAAa,EAAE/B,oBAAoB,CAACgC,iCAAiC;IACrEC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGrC,KAAK,CAACsC,WAAW,CAACvB,YAAY,IAAI;IAC5DS,MAAM,CAACe,KAAK,CAAC,yBAAyB,CAAC;IACvCzB,MAAM,CAACc,OAAO,CAACY,QAAQ,CAACC,iBAAiB,CAAC1B,YAAY,CAAC,CAAC;IACxDD,MAAM,CAACc,OAAO,CAACc,YAAY,CAAC,eAAe,EAAE3B,YAAY,CAAC4B,aAAa,CAAC;EAC1E,CAAC,EAAE,CAACnB,MAAM,EAAEV,MAAM,CAAC,CAAC;;EAEpB;AACF;AACA;EACE,MAAM8B,SAAS,GAAG5C,KAAK,CAACsC,WAAW,CAACO,KAAK,IAAI,CAAC,CAAC,EAAE1C,oBAAoB,CAAC2C,wBAAwB,EAAEhC,MAAM,CAAC,CAAC+B,KAAK,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC;EACzH,MAAMiC,aAAa,GAAG/C,KAAK,CAACsC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAEnC,oBAAoB,CAAC6C,6BAA6B,EAAElC,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACxH,MAAMmC,iBAAiB,GAAGjD,KAAK,CAACsC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAEnC,oBAAoB,CAAC+C,oCAAoC,EAAEpC,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACnI,MAAMqC,cAAc,GAAGnD,KAAK,CAACsC,WAAW,CAAC,CAACO,KAAK,EAAEO,iBAAiB,GAAG,IAAI,KAAK;IAC5E,MAAMlC,OAAO,GAAGkC,iBAAiB,GAAG,CAAC,CAAC,EAAEjD,oBAAoB,CAAC+C,oCAAoC,EAAEpC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAEX,oBAAoB,CAAC6C,6BAA6B,EAAElC,MAAM,CAAC;IAC5K,OAAOI,OAAO,CAACmC,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACT,KAAK,KAAKA,KAAK,CAAC;EACtD,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC;EACZ,MAAMyC,iBAAiB,GAAGvD,KAAK,CAACsC,WAAW,CAACO,KAAK,IAAI;IACnD,MAAMW,KAAK,GAAGL,cAAc,CAACN,KAAK,CAAC;IACnC,OAAO,CAAC,CAAC,EAAE1C,oBAAoB,CAACsD,2BAA2B,EAAE3C,MAAM,CAAC,CAAC0C,KAAK,CAAC;EAC7E,CAAC,EAAE,CAAC1C,MAAM,EAAEqC,cAAc,CAAC,CAAC;EAC5B,MAAMO,wBAAwB,GAAG1D,KAAK,CAACsC,WAAW,CAACqB,KAAK,IAAI;IAC1D,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAEzD,oBAAoB,CAACgC,iCAAiC,EAAErB,MAAM,CAAC;IACxF,IAAI8C,YAAY,KAAKD,KAAK,EAAE;MAC1B7C,MAAM,CAACc,OAAO,CAACY,QAAQ,CAAC5B,KAAK,IAAI,CAAC,CAAC,EAAEb,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEqB,KAAK,EAAE;QACjEM,OAAO,EAAE,CAAC,CAAC,EAAEV,iBAAiB,CAACQ,kBAAkB,EAAE;UACjDF,MAAM;UACNG,eAAe,EAAE,EAAE;UACnBE,YAAY,EAAE0C,SAAS;UACvBzC,qBAAqB,EAAEuC,KAAK;UAC5BtC,uBAAuB,EAAE;QAC3B,CAAC;MACH,CAAC,CAAC,CAAC;MACHP,MAAM,CAACc,OAAO,CAACkC,mBAAmB,GAAG,CAAC;IACxC;EACF,CAAC,EAAE,CAAChD,MAAM,CAAC,CAAC;EACZ,MAAMiD,aAAa,GAAG/D,KAAK,CAACsC,WAAW,CAACpB,OAAO,IAAI;IACjD,IAAI,CAAC,CAAC,EAAER,SAAS,CAACsD,uBAAuB,EAAElD,MAAM,CAAC,EAAE;MAClDA,MAAM,CAACc,OAAO,CAACqC,qBAAqB,CAAC/C,OAAO,CAAC;MAC7C;IACF;IACA,MAAMH,YAAY,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,kBAAkB,EAAE;MAC7DF,MAAM;MACNG,eAAe,EAAEC,OAAO;MACxBC,YAAY,EAAE0C,SAAS;MACvBxC,uBAAuB,EAAE,KAAK;MAC9B6C,4BAA4B,EAAE;IAChC,CAAC,CAAC;IACF7B,mBAAmB,CAACtB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACD,MAAM,EAAEuB,mBAAmB,CAAC,CAAC;EACjC,MAAM8B,mBAAmB,GAAGnE,KAAK,CAACsC,WAAW,CAAC,CAACO,KAAK,EAAEuB,SAAS,KAAK;IAClE,MAAMhD,qBAAqB,GAAG,CAAC,CAAC,EAAEjB,oBAAoB,CAACgC,iCAAiC,EAAErB,MAAM,CAAC;IACjG,MAAMuD,kBAAkB,GAAGjD,qBAAqB,CAACyB,KAAK,CAAC,IAAI,IAAI;IAC/D,IAAIuB,SAAS,KAAKC,kBAAkB,EAAE;MACpC,MAAMC,QAAQ,GAAG,CAAC,CAAC,EAAEvE,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAE6B,qBAAqB,EAAE;QACjE,CAACyB,KAAK,GAAGuB;MACX,CAAC,CAAC;MACFtD,MAAM,CAACc,OAAO,CAAC8B,wBAAwB,CAACY,QAAQ,CAAC;IACnD;EACF,CAAC,EAAE,CAACxD,MAAM,CAAC,CAAC;EACZ,MAAMyD,sCAAsC,GAAGvE,KAAK,CAACsC,WAAW,CAACO,KAAK,IAAI;IACxE,MAAM2B,UAAU,GAAG,CAAC,CAAC,EAAErE,oBAAoB,CAACsE,wBAAwB,EAAE3D,MAAM,CAAC;IAC7E,OAAO0D,UAAU,CAACnB,SAAS,CAACC,GAAG,IAAIA,GAAG,KAAKT,KAAK,CAAC;EACnD,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC;EACZ,MAAM4D,cAAc,GAAG1E,KAAK,CAACsC,WAAW,CAAC,CAACO,KAAK,EAAE8B,mBAAmB,KAAK;IACvE,MAAMH,UAAU,GAAG,CAAC,CAAC,EAAErE,oBAAoB,CAACsE,wBAAwB,EAAE3D,MAAM,CAAC;IAC7E,MAAM8D,gBAAgB,GAAGL,sCAAsC,CAAC1B,KAAK,CAAC;IACtE,IAAI+B,gBAAgB,KAAKD,mBAAmB,EAAE;MAC5C;IACF;IACAnD,MAAM,CAACe,KAAK,CAAC,iBAAiBM,KAAK,aAAa8B,mBAAmB,EAAE,CAAC;IACtE,MAAME,cAAc,GAAG,CAAC,GAAGL,UAAU,CAAC;IACtC,MAAMM,YAAY,GAAGD,cAAc,CAACE,MAAM,CAACH,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClEC,cAAc,CAACE,MAAM,CAACJ,mBAAmB,EAAE,CAAC,EAAEG,YAAY,CAAC;IAC3DzC,mBAAmB,CAAC,CAAC,CAAC,EAAEtC,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEY,oBAAoB,CAAC6E,wBAAwB,EAAElE,MAAM,CAAC,EAAE;MACzG6B,aAAa,EAAEkC;IACjB,CAAC,CAAC,CAAC;IACH,MAAMI,MAAM,GAAG;MACbC,MAAM,EAAEpE,MAAM,CAACc,OAAO,CAACgB,SAAS,CAACC,KAAK,CAAC;MACvCsC,WAAW,EAAErE,MAAM,CAACc,OAAO,CAAC2C,sCAAsC,CAAC1B,KAAK,CAAC;MACzEuC,QAAQ,EAAER;IACZ,CAAC;IACD9D,MAAM,CAACc,OAAO,CAACc,YAAY,CAAC,mBAAmB,EAAEuC,MAAM,CAAC;EAC1D,CAAC,EAAE,CAACnE,MAAM,EAAEU,MAAM,EAAEa,mBAAmB,EAAEkC,sCAAsC,CAAC,CAAC;EACjF,MAAMc,cAAc,GAAGrF,KAAK,CAACsC,WAAW,CAAC,CAACO,KAAK,EAAEyC,KAAK,KAAK;IACzD9D,MAAM,CAACe,KAAK,CAAC,mBAAmBM,KAAK,aAAayC,KAAK,EAAE,CAAC;IAC1D,MAAMvE,YAAY,GAAG,CAAC,CAAC,EAAEZ,oBAAoB,CAAC6E,wBAAwB,EAAElE,MAAM,CAAC;IAC/E,MAAMoE,MAAM,GAAGnE,YAAY,CAACwE,MAAM,CAAC1C,KAAK,CAAC;IACzC,MAAM2C,SAAS,GAAG,CAAC,CAAC,EAAEzF,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAE2F,MAAM,EAAE;MACnDI,KAAK;MACLG,cAAc,EAAE;IAClB,CAAC,CAAC;IACFpD,mBAAmB,CAAC,CAAC,CAAC,EAAE7B,iBAAiB,CAACkF,mBAAmB,EAAE,CAAC,CAAC,EAAE3F,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEwB,YAAY,EAAE;MACtGwE,MAAM,EAAE,CAAC,CAAC,EAAExF,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEwB,YAAY,CAACwE,MAAM,EAAE;QACtD,CAAC1C,KAAK,GAAG2C;MACX,CAAC;IACH,CAAC,CAAC,EAAE1E,MAAM,CAACc,OAAO,CAAC+D,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACxC7E,MAAM,CAACc,OAAO,CAACc,YAAY,CAAC,mBAAmB,EAAE;MAC/CkD,OAAO,EAAE9E,MAAM,CAACc,OAAO,CAACiE,sBAAsB,CAAChD,KAAK,CAAC;MACrDiD,MAAM,EAAEN,SAAS;MACjBF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACxE,MAAM,EAAEU,MAAM,EAAEa,mBAAmB,CAAC,CAAC;EACzC,MAAM0D,SAAS,GAAG;IAChBnD,SAAS;IACTG,aAAa;IACbI,cAAc;IACdI,iBAAiB;IACjBN,iBAAiB;IACjBsB,sCAAsC;IACtCR,aAAa;IACbL,wBAAwB;IACxBS,mBAAmB;IACnBkB;EACF,CAAC;EACD,MAAMW,gBAAgB,GAAG;IACvBtB;EACF,CAAC;EACD,CAAC,CAAC,EAAEzE,iBAAiB,CAACgG,gBAAgB,EAAEnF,MAAM,EAAEiF,SAAS,EAAE,QAAQ,CAAC;EACpE,CAAC,CAAC,EAAE9F,iBAAiB,CAACgG,gBAAgB,EAAEnF,MAAM,EAAEkF,gBAAgB,EAAEnF,KAAK,CAACqF,SAAS,KAAK9F,UAAU,CAAC+F,aAAa,CAACC,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;;EAE/I;AACF;AACA;EACE,MAAMC,wBAAwB,GAAGrG,KAAK,CAACsC,WAAW,CAAC,CAACgE,SAAS,EAAEC,OAAO,KAAK;IACzE,MAAMC,oBAAoB,GAAG,CAAC,CAAC;IAC/B,MAAMC,6BAA6B,GAAG,CAAC,CAAC,EAAEtG,oBAAoB,CAACgC,iCAAiC,EAAErB,MAAM,CAAC;IACzG,MAAM4F,iCAAiC;IACvC;IACA,CAACH,OAAO,CAACI,qBAAqB;IAC9B;IACA9F,KAAK,CAACO,qBAAqB,IAAI,IAAI;IACnC;IACA;IACA3B,MAAM,CAACmH,IAAI,CAAC/F,KAAK,CAACM,YAAY,EAAED,OAAO,EAAEE,qBAAqB,IAAI,CAAC,CAAC,CAAC,CAACyF,MAAM,GAAG,CAAC;IAChF;IACApH,MAAM,CAACmH,IAAI,CAACH,6BAA6B,CAAC,CAACI,MAAM,GAAG,CAAC;IACrD,IAAIH,iCAAiC,EAAE;MACrCF,oBAAoB,CAACpF,qBAAqB,GAAGqF,6BAA6B;IAC5E;IACAD,oBAAoB,CAAC7D,aAAa,GAAG,CAAC,CAAC,EAAExC,oBAAoB,CAACsE,wBAAwB,EAAE3D,MAAM,CAAC;IAC/F,MAAMI,OAAO,GAAG,CAAC,CAAC,EAAEf,oBAAoB,CAAC6C,6BAA6B,EAAElC,MAAM,CAAC;IAC/E,MAAMgG,UAAU,GAAG,CAAC,CAAC;IACrB5F,OAAO,CAAC6F,OAAO,CAACjB,MAAM,IAAI;MACxB,IAAIA,MAAM,CAACL,cAAc,EAAE;QACzB,MAAMuB,gBAAgB,GAAG,CAAC,CAAC;QAC3BxG,iBAAiB,CAACyG,4BAA4B,CAACF,OAAO,CAACG,YAAY,IAAI;UACrE,IAAIC,aAAa,GAAGrB,MAAM,CAACoB,YAAY,CAAC;UACxC,IAAIC,aAAa,KAAKC,QAAQ,EAAE;YAC9BD,aAAa,GAAG,CAAC,CAAC;UACpB;UACAH,gBAAgB,CAACE,YAAY,CAAC,GAAGC,aAAa;QAChD,CAAC,CAAC;QACFL,UAAU,CAAChB,MAAM,CAACjD,KAAK,CAAC,GAAGmE,gBAAgB;MAC7C;IACF,CAAC,CAAC;IACF,IAAIvH,MAAM,CAACmH,IAAI,CAACE,UAAU,CAAC,CAACD,MAAM,GAAG,CAAC,EAAE;MACtCL,oBAAoB,CAACM,UAAU,GAAGA,UAAU;IAC9C;IACA,OAAO,CAAC,CAAC,EAAE/G,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAE+G,SAAS,EAAE;MAC3CpF,OAAO,EAAEsF;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC1F,MAAM,EAAED,KAAK,CAACO,qBAAqB,EAAEP,KAAK,CAACM,YAAY,EAAED,OAAO,CAAC,CAAC;EACtE,MAAMmG,yBAAyB,GAAGrH,KAAK,CAACsC,WAAW,CAAC,CAAC2C,MAAM,EAAEsB,OAAO,KAAK;IACvE,MAAMe,6BAA6B,GAAGf,OAAO,CAACgB,cAAc,CAACrG,OAAO,EAAEE,qBAAqB;IAC3F,MAAMD,YAAY,GAAGoF,OAAO,CAACgB,cAAc,CAACrG,OAAO;IACnD,IAAIoG,6BAA6B,IAAI,IAAI,IAAInG,YAAY,IAAI,IAAI,EAAE;MACjE,OAAO8D,MAAM;IACf;IACA,MAAMlE,YAAY,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,kBAAkB,EAAE;MAC7DF,MAAM;MACNG,eAAe,EAAE,EAAE;MACnBE,YAAY;MACZC,qBAAqB,EAAEkG,6BAA6B;MACpDjG,uBAAuB,EAAE;IAC3B,CAAC,CAAC;IACFP,MAAM,CAACc,OAAO,CAACY,QAAQ,CAACC,iBAAiB,CAAC1B,YAAY,CAAC,CAAC;IACxD,IAAII,YAAY,IAAI,IAAI,EAAE;MACxBL,MAAM,CAACc,OAAO,CAACc,YAAY,CAAC,eAAe,EAAE3B,YAAY,CAAC4B,aAAa,CAAC;IAC1E;IACA,OAAOsC,MAAM;EACf,CAAC,EAAE,CAACnE,MAAM,CAAC,CAAC;EACZ,MAAM0G,4BAA4B,GAAGxH,KAAK,CAACsC,WAAW,CAAC,CAACmF,YAAY,EAAE7H,KAAK,KAAK;IAC9E,IAAIA,KAAK,KAAKa,iBAAiB,CAACiH,yBAAyB,CAACxG,OAAO,EAAE;MACjE,MAAMyG,YAAY,GAAG9G,KAAK,CAAC+G,KAAK,CAACC,YAAY;MAC7C,OAAO,aAAa,CAAC,CAAC,EAAElH,WAAW,CAACmH,GAAG,EAAEH,YAAY,EAAE,CAAC,CAAC,EAAE5H,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEsB,KAAK,CAACkH,SAAS,EAAEF,YAAY,CAAC,CAAC;IACnH;IACA,OAAOJ,YAAY;EACrB,CAAC,EAAE,CAAC5G,KAAK,CAAC+G,KAAK,CAACC,YAAY,EAAEhH,KAAK,CAACkH,SAAS,EAAEF,YAAY,CAAC,CAAC;EAC7D,MAAMG,kBAAkB,GAAGhI,KAAK,CAACsC,WAAW,CAAC2F,eAAe,IAAI;IAC9D,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAExH,SAAS,CAACsD,uBAAuB,EAAElD,MAAM,CAAC;IACpE,IAAID,KAAK,CAACsH,qBAAqB,IAAID,aAAa,EAAE;MAChD,OAAOD,eAAe;IACxB;IACA,OAAO,CAAC,GAAGA,eAAe,EAAE,uBAAuB,CAAC;EACtD,CAAC,EAAE,CAACpH,KAAK,CAACsH,qBAAqB,EAAErH,MAAM,CAAC,CAAC;EACzC,CAAC,CAAC,EAAER,eAAe,CAAC8H,4BAA4B,EAAEtH,MAAM,EAAE,YAAY,EAAEkH,kBAAkB,CAAC;EAC3F,CAAC,CAAC,EAAE1H,eAAe,CAAC8H,4BAA4B,EAAEtH,MAAM,EAAE,aAAa,EAAEuF,wBAAwB,CAAC;EAClG,CAAC,CAAC,EAAE/F,eAAe,CAAC8H,4BAA4B,EAAEtH,MAAM,EAAE,cAAc,EAAEuG,yBAAyB,CAAC;EACpG,CAAC,CAAC,EAAE/G,eAAe,CAAC8H,4BAA4B,EAAEtH,MAAM,EAAE,iBAAiB,EAAE0G,4BAA4B,CAAC;;EAE1G;AACF;AACA;;EAEE,MAAMa,cAAc,GAAGrI,KAAK,CAAC2B,MAAM,CAAC,IAAI,CAAC;EACzC,MAAM2G,oBAAoB,GAAGC,IAAI,IAAI;IACnC,IAAIF,cAAc,CAACzG,OAAO,KAAK2G,IAAI,CAACjD,KAAK,EAAE;MACzC+C,cAAc,CAACzG,OAAO,GAAG2G,IAAI,CAACjD,KAAK;MACnC,MAAMkD,cAAc,GAAG,CAAC,CAAC,EAAErI,oBAAoB,CAAC+C,oCAAoC,EAAEpC,MAAM,CAAC,CAAC2H,IAAI,CAACnF,GAAG,IAAIA,GAAG,CAACoF,IAAI,IAAIpF,GAAG,CAACoF,IAAI,GAAG,CAAC,CAAC;MACnI,IAAI,CAACF,cAAc,EAAE;QACnB;MACF;MACAnG,mBAAmB,CAAC,CAAC,CAAC,EAAE7B,iBAAiB,CAACkF,mBAAmB,EAAE,CAAC,CAAC,EAAEvF,oBAAoB,CAAC6E,wBAAwB,EAAElE,MAAM,CAAC,EAAEA,MAAM,CAACc,OAAO,CAAC+D,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACjK;EACF,CAAC;EACD,CAAC,CAAC,EAAEtF,aAAa,CAACsI,YAAY,EAAE7H,MAAM,EAAE,yBAAyB,EAAEwH,oBAAoB,CAAC;;EAExF;AACF;AACA;EACE,MAAMM,cAAc,GAAG5I,KAAK,CAACsC,WAAW,CAAC,MAAM;IAC7Cd,MAAM,CAACqH,IAAI,CAAC,gEAAgE,CAAC;IAC7E,MAAM9H,YAAY,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,kBAAkB,EAAE;MAC7DF,MAAM;MACNG,eAAe,EAAE,EAAE;MACnBE,YAAY,EAAE0C,SAAS;MACvBxC,uBAAuB,EAAE;IAC3B,CAAC,CAAC;IACFgB,mBAAmB,CAACtB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACD,MAAM,EAAEU,MAAM,EAAEa,mBAAmB,CAAC,CAAC;EACzC,CAAC,CAAC,EAAE/B,eAAe,CAACwI,0BAA0B,EAAEhI,MAAM,EAAE,gBAAgB,EAAE8H,cAAc,CAAC;;EAEzF;AACF;AACA;EACE;EACA;EACA,MAAMG,aAAa,GAAG/I,KAAK,CAAC2B,MAAM,CAAC,IAAI,CAAC;EACxC3B,KAAK,CAACgJ,SAAS,CAAC,MAAM;IACpB,IAAID,aAAa,CAACnH,OAAO,EAAE;MACzBmH,aAAa,CAACnH,OAAO,GAAG,KAAK;MAC7B;IACF;IACAJ,MAAM,CAACqH,IAAI,CAAC,wCAAwChI,KAAK,CAACK,OAAO,CAAC2F,MAAM,EAAE,CAAC;IAC3E,IAAInF,mBAAmB,CAACE,OAAO,KAAKf,KAAK,CAACK,OAAO,EAAE;MACjD;IACF;IACA,MAAMH,YAAY,GAAG,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,kBAAkB,EAAE;MAC7DF,MAAM;MACNK,YAAY,EAAE0C,SAAS;MACvB;MACA5C,eAAe,EAAEJ,KAAK,CAACK,OAAO;MAC9BG,uBAAuB,EAAE,IAAI;MAC7B6C,4BAA4B,EAAE;IAChC,CAAC,CAAC;IACFxC,mBAAmB,CAACE,OAAO,GAAGf,KAAK,CAACK,OAAO;IAC3CmB,mBAAmB,CAACtB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACS,MAAM,EAAEV,MAAM,EAAEuB,mBAAmB,EAAExB,KAAK,CAACK,OAAO,CAAC,CAAC;EACxDlB,KAAK,CAACgJ,SAAS,CAAC,MAAM;IACpB,IAAInI,KAAK,CAACO,qBAAqB,KAAKyC,SAAS,EAAE;MAC7C/C,MAAM,CAACc,OAAO,CAAC8B,wBAAwB,CAAC7C,KAAK,CAACO,qBAAqB,CAAC;IACtE;EACF,CAAC,EAAE,CAACN,MAAM,EAAEU,MAAM,EAAEX,KAAK,CAACO,qBAAqB,CAAC,CAAC;AACnD;AACA,SAASqB,iBAAiBA,CAAC1B,YAAY,EAAE;EACvC,OAAOH,KAAK,IAAI,CAAC,CAAC,EAAEb,SAAS,CAACR,OAAO,EAAE,CAAC,CAAC,EAAEqB,KAAK,EAAE;IAChDM,OAAO,EAAEH;EACX,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}