{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowEditing = void 0;\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridEditingSelectors = require(\"./gridEditingSelectors\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _utils = require(\"../../../utils/utils\");\nvar _gridRowParams = require(\"../../../models/params/gridRowParams\");\nvar _colDef = require(\"../../../colDef\");\nvar _utils2 = require(\"./utils\");\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nconst useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const prevRowValuesLookup = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === _gridEditRowModel.GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = (0, _extends2.default)({}, rowParams, {\n      field: params.field,\n      reason: _gridRowParams.GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = (0, _extends2.default)({}, rowParams, {\n          field: params.field,\n          reason: _gridRowParams.GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = _gridRowParams.GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridRowParams.GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = (0, _gridColumnsSelector.gridVisibleColumnFieldsSelector)(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === _colDef.GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = _gridRowParams.GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = _gridRowParams.GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== _gridRowParams.GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = (0, _extends2.default)({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if ((0, _keyboardUtils.isPrintableKey)(event)) {\n        reason = _gridRowParams.GridRowEditStartReasons.printableKeyDown;\n      } else if ((0, _keyboardUtils.isPasteShortcut)(event)) {\n        reason = _gridRowParams.GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridRowParams.GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = _gridRowParams.GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = (0, _extends2.default)({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === _gridRowParams.GridRowEditStartReasons.printableKeyDown || reason === _gridRowParams.GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === _gridRowParams.GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === _gridRowParams.GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === _gridRowParams.GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'rowEditStart', props.onRowEditStart);\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    const isEditing = (0, _gridEditingSelectors.gridRowIsEditingSelector)(apiRef, {\n      rowId: id,\n      editMode: props.editMode\n    });\n    return isEditing ? _gridEditRowModel.GridRowModes.Edit : _gridEditRowModel.GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = (0, _useEventCallback.default)(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = (0, _extends2.default)({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = (0, _extends2.default)({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = (0, _extends2.default)({}, newEditingState[id], {\n          [field]: (0, _extends2.default)({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded);\n    throwIfNotInMode(id, _gridEditRowModel.GridRowModes.View);\n    updateRowInRowModesModel(id, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = (0, _useEventCallback.default)(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const row = apiRef.current.getRow(id);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const newProps = columns.reduce((acc, col) => {\n      const field = col.field;\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = (0, _utils2.getDefaultCellValue)(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: column.editable && !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    prevRowValuesLookup.current[id] = row;\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columns.filter(column => column.editable && !!column.preProcessEditCellProps && deleteValue).forEach(column => {\n      const field = column.field;\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? (0, _utils2.getDefaultCellValue)(column) : initialValue ?? value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.Edit) {\n          const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          updateOrDeleteFieldState(id, field, (0, _extends2.default)({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded2);\n    throwIfNotInMode(id, _gridEditRowModel.GridRowModes.Edit);\n    updateRowInRowModesModel(id, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n      delete prevRowValuesLookup.current[id];\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = prevRowValuesLookup.current[id];\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: _gridEditRowModel.GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (props.dataSource?.updateRow) {\n      if ((0, _isDeepEqual.isDeepEqual)(row, rowUpdate)) {\n        finishRowEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: _gridEditRowModel.GridRowModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishRowEditMode();\n      } catch {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        // The row might have been deleted\n        if (prevRowModesModel.current[id]) {\n          prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n          // Revert the mode in the rowModesModel prop back to \"edit\"\n          updateRowInRowModesModel(id, {\n            mode: _gridEditRowModel.GridRowModes.Edit\n          });\n        }\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    let newProps = (0, _extends2.default)({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = (0, _extends2.default)({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = (0, _objectWithoutPropertiesLoose2.default)(_editingState$id, [field].map(_toPropertyKey2.default));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          processedProps = (0, _extends2.default)({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = (0, _extends2.default)({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = (0, _objectWithoutPropertiesLoose2.default)(_editingState$id2, [thisField].map(_toPropertyKey2.default));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = (0, _extends2.default)({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.Edit) {\n          editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = (0, _extends2.default)({}, prevRowValuesLookup.current[id], row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      // Column might have been removed\n      // see https://github.com/mui/mui-x/pull/16888\n      if (column?.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  (0, _useEnhancedEffect.default)(() => {\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = (0, _utils.deepClone)(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: _gridEditRowModel.GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || _gridEditRowModel.GridRowModes.View;\n      const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n      if (params.mode === _gridEditRowModel.GridRowModes.Edit && prevMode === _gridEditRowModel.GridRowModes.View) {\n        updateStateToStartRowEditMode((0, _extends2.default)({\n          id: originalId\n        }, params));\n      } else if (params.mode === _gridEditRowModel.GridRowModes.View && prevMode === _gridEditRowModel.GridRowModes.Edit) {\n        updateStateToStopRowEditMode((0, _extends2.default)({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};\nexports.useGridRowEditing = useGridRowEditing;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","Object","defineProperty","exports","value","useGridRowEditing","_toPropertyKey2","_objectWithoutPropertiesLoose2","_extends2","React","_useEventCallback","_useEnhancedEffect","_warning","_isDeepEqual","_useGridEvent","_gridEditRowModel","_useGridApiMethod","_gridEditingSelectors","_keyboardUtils","_gridColumnsSelector","_gridRowsSelector","_utils","_gridRowParams","_colDef","_utils2","_excluded","_excluded2","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","prevRowValuesLookup","focusTimeout","undefined","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","args","editMode","GridEditModes","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","hasFieldsWithErrors","rowId","editingState","gridEditRowsStateSelector","values","some","fieldProps","error","handleCellDoubleClick","event","isEditable","GridRowModes","Edit","rowParams","getRowParams","newParams","reason","GridRowEditStartReasons","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","getRow","GridRowEditStopReasons","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","gridVisibleColumnFieldsSelector","filter","column","getColumn","type","GRID_ACTIONS_COLUMN_TYPE","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","canStartEditing","unstable_applyPipeProcessors","cellParams","isPrintableKey","printableKeyDown","isPasteShortcut","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","useGridEvent","useGridEventPriority","onRowEditStart","onRowEditStop","isEditing","gridRowIsEditingSelector","updateRowModesModel","newModel","isNewModelDifferentFromProp","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","state","newEditingState","editRows","updateOrDeleteFieldState","keys","other","updateStateToStartRowEditMode","initialValue","row","columns","gridColumnDefinitionsSelector","reduce","acc","col","newValue","getCellValue","getDefaultCellValue","isProcessingProps","editable","preProcessEditCellProps","forEach","Promise","resolve","hasChanged","then","processedProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","isSomeFieldProcessingProps","rowUpdate","getRowWithUpdatedValuesFromRowEditing","dataSource","updateRow","isDeepEqual","handleError","updateRowParams","updatedRow","previousRow","editRow","errorThrown","process","env","NODE_ENV","warnOnce","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","promises","_editingState$id","otherFieldsProps","map","promise","push","entries","thisField","fieldColumn","_editingState$id2","all","valueSetter","editingApi","editingPrivateApi","useGridApiMethod","rowsLookup","gridRowsLookupSelector","copyOfPrevRowModesModel","deepClone","ids","Set","Array","from","prevMode","originalId","getRowId"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowEditing = void 0;\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridEditingSelectors = require(\"./gridEditingSelectors\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _utils = require(\"../../../utils/utils\");\nvar _gridRowParams = require(\"../../../models/params/gridRowParams\");\nvar _colDef = require(\"../../../colDef\");\nvar _utils2 = require(\"./utils\");\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nconst useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const prevRowValuesLookup = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === _gridEditRowModel.GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = (0, _extends2.default)({}, rowParams, {\n      field: params.field,\n      reason: _gridRowParams.GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === _gridEditRowModel.GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = (0, _extends2.default)({}, rowParams, {\n          field: params.field,\n          reason: _gridRowParams.GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = _gridRowParams.GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridRowParams.GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = (0, _gridColumnsSelector.gridVisibleColumnFieldsSelector)(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === _colDef.GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = _gridRowParams.GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = _gridRowParams.GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== _gridRowParams.GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = (0, _extends2.default)({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if ((0, _keyboardUtils.isPrintableKey)(event)) {\n        reason = _gridRowParams.GridRowEditStartReasons.printableKeyDown;\n      } else if ((0, _keyboardUtils.isPasteShortcut)(event)) {\n        reason = _gridRowParams.GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridRowParams.GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = _gridRowParams.GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = (0, _extends2.default)({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === _gridRowParams.GridRowEditStartReasons.printableKeyDown || reason === _gridRowParams.GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === _gridRowParams.GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === _gridRowParams.GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === _gridRowParams.GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'rowEditStart', props.onRowEditStart);\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    const isEditing = (0, _gridEditingSelectors.gridRowIsEditingSelector)(apiRef, {\n      rowId: id,\n      editMode: props.editMode\n    });\n    return isEditing ? _gridEditRowModel.GridRowModes.Edit : _gridEditRowModel.GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = (0, _useEventCallback.default)(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = (0, _extends2.default)({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = (0, _extends2.default)({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = (0, _extends2.default)({}, newEditingState[id], {\n          [field]: (0, _extends2.default)({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded);\n    throwIfNotInMode(id, _gridEditRowModel.GridRowModes.View);\n    updateRowInRowModesModel(id, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = (0, _useEventCallback.default)(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const row = apiRef.current.getRow(id);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const newProps = columns.reduce((acc, col) => {\n      const field = col.field;\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = (0, _utils2.getDefaultCellValue)(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: column.editable && !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    prevRowValuesLookup.current[id] = row;\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columns.filter(column => column.editable && !!column.preProcessEditCellProps && deleteValue).forEach(column => {\n      const field = column.field;\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? (0, _utils2.getDefaultCellValue)(column) : initialValue ?? value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.Edit) {\n          const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          updateOrDeleteFieldState(id, field, (0, _extends2.default)({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded2);\n    throwIfNotInMode(id, _gridEditRowModel.GridRowModes.Edit);\n    updateRowInRowModesModel(id, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n      delete prevRowValuesLookup.current[id];\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = prevRowValuesLookup.current[id];\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: _gridEditRowModel.GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (props.dataSource?.updateRow) {\n      if ((0, _isDeepEqual.isDeepEqual)(row, rowUpdate)) {\n        finishRowEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: _gridEditRowModel.GridRowModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishRowEditMode();\n      } catch {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        // The row might have been deleted\n        if (prevRowModesModel.current[id]) {\n          prevRowModesModel.current[id].mode = _gridEditRowModel.GridRowModes.Edit;\n          // Revert the mode in the rowModesModel prop back to \"edit\"\n          updateRowInRowModesModel(id, {\n            mode: _gridEditRowModel.GridRowModes.Edit\n          });\n        }\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    let newProps = (0, _extends2.default)({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = (0, _extends2.default)({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = (0, _objectWithoutPropertiesLoose2.default)(_editingState$id, [field].map(_toPropertyKey2.default));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          processedProps = (0, _extends2.default)({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = (0, _extends2.default)({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = (0, _objectWithoutPropertiesLoose2.default)(_editingState$id2, [thisField].map(_toPropertyKey2.default));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = (0, _extends2.default)({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === _gridEditRowModel.GridRowModes.Edit) {\n          editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = (0, _extends2.default)({}, prevRowValuesLookup.current[id], row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      // Column might have been removed\n      // see https://github.com/mui/mui-x/pull/16888\n      if (column?.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  (0, _useEnhancedEffect.default)(() => {\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = (0, _utils.deepClone)(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: _gridEditRowModel.GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || _gridEditRowModel.GridRowModes.View;\n      const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n      if (params.mode === _gridEditRowModel.GridRowModes.Edit && prevMode === _gridEditRowModel.GridRowModes.View) {\n        updateStateToStartRowEditMode((0, _extends2.default)({\n          id: originalId\n        }, params));\n      } else if (params.mode === _gridEditRowModel.GridRowModes.View && prevMode === _gridEditRowModel.GridRowModes.Edit) {\n        updateStateToStopRowEditMode((0, _extends2.default)({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};\nexports.useGridRowEditing = useGridRowEditing;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}