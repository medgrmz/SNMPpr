{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridClipboard = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"../../utils\");\nvar _gridFocusStateSelector = require(\"../focus/gridFocusStateSelector\");\nvar _csvSerializer = require(\"../export/serializers/csvSerializer\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _rowSelection = require(\"../rowSelection\");\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction copyToClipboard(data) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(data).catch(() => {\n      writeToClipboardPolyfill(data);\n    });\n  } else {\n    writeToClipboardPolyfill(data);\n  }\n}\nfunction hasNativeSelection(element) {\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if (window.getSelection()?.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nconst useGridClipboard = (apiRef, props) => {\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  const handleCopy = React.useCallback(event => {\n    if (!(0, _keyboardUtils.isCopyShortcut)(event)) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    let textToCopy = '';\n    const selectedRowsCount = (0, _rowSelection.gridRowSelectionCountSelector)(apiRef);\n    if (selectedRowsCount > 0) {\n      textToCopy = apiRef.current.getDataAsCsv({\n        includeHeaders: false,\n        delimiter: clipboardCopyCellDelimiter,\n        shouldAppendQuotes: false,\n        escapeFormulas: false\n      });\n    } else {\n      const focusedCell = (0, _gridFocusStateSelector.gridFocusCellSelector)(apiRef);\n      if (focusedCell) {\n        const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);\n        textToCopy = (0, _csvSerializer.serializeCellValue)(cellParams, {\n          csvOptions: {\n            delimiter: clipboardCopyCellDelimiter,\n            shouldAppendQuotes: false,\n            escapeFormulas: false\n          },\n          ignoreValueFormatter\n        });\n      }\n    }\n    textToCopy = apiRef.current.unstable_applyPipeProcessors('clipboardCopy', textToCopy);\n    if (textToCopy) {\n      copyToClipboard(textToCopy);\n      apiRef.current.publishEvent('clipboardCopy', textToCopy);\n    }\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  (0, _utils.useGridNativeEventListener)(apiRef, () => apiRef.current.rootElementRef.current, 'keydown', handleCopy);\n  (0, _utils.useGridEventPriority)(apiRef, 'clipboardCopy', props.onClipboardCopy);\n};\nexports.useGridClipboard = useGridClipboard;","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","useGridClipboard","React","_utils","_gridFocusStateSelector","_csvSerializer","_keyboardUtils","_rowSelection","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","copyToClipboard","navigator","clipboard","writeText","catch","hasNativeSelection","element","toString","selectionEnd","selectionStart","apiRef","props","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","handleCopy","useCallback","event","isCopyShortcut","target","textToCopy","selectedRowsCount","gridRowSelectionCountSelector","current","getDataAsCsv","includeHeaders","delimiter","shouldAppendQuotes","escapeFormulas","focusedCell","gridFocusCellSelector","cellParams","getCellParams","id","field","serializeCellValue","csvOptions","unstable_applyPipeProcessors","publishEvent","useGridNativeEventListener","rootElementRef","useGridEventPriority","onClipboardCopy"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridClipboard = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"../../utils\");\nvar _gridFocusStateSelector = require(\"../focus/gridFocusStateSelector\");\nvar _csvSerializer = require(\"../export/serializers/csvSerializer\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _rowSelection = require(\"../rowSelection\");\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction copyToClipboard(data) {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(data).catch(() => {\n      writeToClipboardPolyfill(data);\n    });\n  } else {\n    writeToClipboardPolyfill(data);\n  }\n}\nfunction hasNativeSelection(element) {\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if (window.getSelection()?.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nconst useGridClipboard = (apiRef, props) => {\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  const handleCopy = React.useCallback(event => {\n    if (!(0, _keyboardUtils.isCopyShortcut)(event)) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    let textToCopy = '';\n    const selectedRowsCount = (0, _rowSelection.gridRowSelectionCountSelector)(apiRef);\n    if (selectedRowsCount > 0) {\n      textToCopy = apiRef.current.getDataAsCsv({\n        includeHeaders: false,\n        delimiter: clipboardCopyCellDelimiter,\n        shouldAppendQuotes: false,\n        escapeFormulas: false\n      });\n    } else {\n      const focusedCell = (0, _gridFocusStateSelector.gridFocusCellSelector)(apiRef);\n      if (focusedCell) {\n        const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);\n        textToCopy = (0, _csvSerializer.serializeCellValue)(cellParams, {\n          csvOptions: {\n            delimiter: clipboardCopyCellDelimiter,\n            shouldAppendQuotes: false,\n            escapeFormulas: false\n          },\n          ignoreValueFormatter\n        });\n      }\n    }\n    textToCopy = apiRef.current.unstable_applyPipeProcessors('clipboardCopy', textToCopy);\n    if (textToCopy) {\n      copyToClipboard(textToCopy);\n      apiRef.current.publishEvent('clipboardCopy', textToCopy);\n    }\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  (0, _utils.useGridNativeEventListener)(apiRef, () => apiRef.current.rootElementRef.current, 'keydown', handleCopy);\n  (0, _utils.useGridEventPriority)(apiRef, 'clipboardCopy', props.onClipboardCopy);\n};\nexports.useGridClipboard = useGridClipboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}