{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridFilter = exports.filterStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reselect = require(\"reselect\");\nvar _utils = require(\"@mui/utils\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useLazyRef = require(\"../../utils/useLazyRef\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridPreferencePanelsValue = require(\"../preferencesPanel/gridPreferencePanelsValue\");\nvar _gridFilterState = require(\"./gridFilterState\");\nvar _gridFilterSelector = require(\"./gridFilterSelector\");\nvar _useFirstRender = require(\"../../utils/useFirstRender\");\nvar _rows = require(\"../rows\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _gridFilterUtils = require(\"./gridFilterUtils\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nconst filterStateInitializer = (state, props, apiRef) => {\n  const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? (0, _gridFilterState.getDefaultGridFilterModel)();\n  return (0, _extends2.default)({}, state, {\n    filter: (0, _extends2.default)({\n      filterModel: (0, _gridFilterUtils.sanitizeFilterModel)(filterModel, props.disableMultipleColumnsFiltering, apiRef)\n    }, _gridFilterState.defaultGridFilterLookup),\n    visibleRowsLookup: {}\n  });\n};\nexports.filterStateInitializer = filterStateInitializer;\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\nfunction createMemoizedValues() {\n  return (0, _reselect.lruMemoize)(Object.values);\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nconst useGridFilter = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: _gridFilterSelector.gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n      const filterState = apiRef.current.getFilterState(filterModel);\n      const newState = (0, _extends2.default)({}, state, {\n        filter: (0, _extends2.default)({}, state.filter, filterState)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return (0, _extends2.default)({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = column.filterOperators?.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [(0, _gridFilterUtils.cleanFilterItem)({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, (0, _gridFilterUtils.cleanFilterItem)({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(_gridPreferencePanelsValue.GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if ((0, _isDeepEqual.isDeepEqual)(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', (0, _gridFilterUtils.mergeStateWithFilterModel)(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = (0, _gridFilterUtils.sanitizeFilterModel)(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? (0, _gridFilterUtils.buildAggregatedFilterApplier)(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel ?? (0, _gridFilterState.getDefaultGridFilterModel)()\n    });\n    return (0, _extends2.default)({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: updateFilteredRows,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const filterModelToExport = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n\n    // Remove the additional `fromInput` property from the filter model\n    filterModelToExport.items.forEach(item => {\n      delete item.fromInput;\n    });\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.filter?.filterModel != null ||\n    // Export if the model is not equal to the default value\n    !(0, _isDeepEqual.isDeepEqual)(filterModelToExport, (0, _gridFilterState.getDefaultGridFilterModel)());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, props.initialState?.filter?.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const filterModel = context.stateToRestore.filter?.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', (0, _gridFilterUtils.mergeStateWithFilterModel)(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return (0, _extends2.default)({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === _gridPreferencePanelsValue.GridPreferencePanelsValue.filters) {\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(FilterPanel, (0, _extends2.default)({}, props.slotProps?.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, props.slotProps?.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = (0, _useLazyRef.useLazyRef)(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters || !params.filterModel.items.length && !params.filterModel.quickFilterValues?.length) {\n      return _gridFilterState.defaultGridFilterLookup;\n    }\n    const dataRowIdToModelLookup = (0, _rows.gridRowsLookupSelector)(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = (0, _gridFilterUtils.passFilterLogic)([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      if (!isRowPassing) {\n        filteredRowsLookup[id] = isRowPassing;\n      }\n    }\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n    return {\n      filteredRowsLookup,\n      filteredChildrenCountLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuItem);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const columnsLookup = (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n  }, [apiRef]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowsSet', updateFilteredRows);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnsChange', handleColumnsChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnVisibilityModelChange', () => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (filterModel.quickFilterValues && (0, _gridFilterUtils.shouldQuickFilterExcludeHiddenColumns)(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      apiRef.current.unstable_applyFilters();\n    }\n  });\n\n  /**\n   * 1ST RENDER\n   */\n  (0, _useFirstRender.useFirstRender)(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  (0, _utils.unstable_useEnhancedEffect)(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};\nexports.useGridFilter = useGridFilter;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridFilter","filterStateInitializer","_extends2","React","_reselect","_utils","_isDeepEqual","_useLazyRef","_useGridEvent","_useGridApiMethod","_useGridLogger","_gridColumnsSelector","_gridPreferencePanelsValue","_gridFilterState","_gridFilterSelector","_useFirstRender","_rows","_pipeProcessing","_strategyProcessing","_gridFilterUtils","_jsxRuntime","state","props","apiRef","filterModel","initialState","filter","getDefaultGridFilterModel","sanitizeFilterModel","disableMultipleColumnsFiltering","defaultGridFilterLookup","visibleRowsLookup","getVisibleRowsLookup","params","filteredRowsLookup","getVisibleRowsLookupState","current","applyStrategyProcessor","tree","rows","createMemoizedValues","lruMemoize","values","logger","useGridLogger","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","gridFilterModelSelector","changeEvent","updateFilteredRows","useCallback","setState","filterState","getFilterState","newState","visibleRowsLookupState","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","panelId","labelId","debug","filterItemsWithValue","undefined","Array","isArray","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","cleanFilterItem","showPreferences","GridPreferencePanelsValue","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","isDeepEqual","quickFilterValues","model","reason","currentModel","updateControlState","mergeStateWithFilterModel","unstable_applyFilters","inputFilterModel","isRowMatchingFilters","filterMode","buildAggregatedFilterApplier","disableEval","filterResult","filterApi","ignoreDiacritics","useGridApiMethod","stateExportPreProcessing","prevState","context","filterModelToExport","fromInput","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","FilterPanel","slots","filterPanel","jsx","slotProps","getRowId","getRowsRef","useLazyRef","flatFilteringMethod","dataRowIdToModelLookup","gridRowsLookupSelector","filterCache","result","passingFilterItems","passingQuickFilterValues","i","row","isRowPassing","passFilterLogic","footerId","footer","filteredChildrenCountLookup","filteredDescendantCountLookup","useGridRegisterPipeProcessor","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","handleColumnsChange","columnsLookup","gridColumnLookupSelector","handleStrategyProcessorChange","methodName","updateVisibleRowsLookupState","useGridEvent","shouldQuickFilterExcludeHiddenColumns","useFirstRender","unstable_useEnhancedEffect"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridFilter = exports.filterStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reselect = require(\"reselect\");\nvar _utils = require(\"@mui/utils\");\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useLazyRef = require(\"../../utils/useLazyRef\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridPreferencePanelsValue = require(\"../preferencesPanel/gridPreferencePanelsValue\");\nvar _gridFilterState = require(\"./gridFilterState\");\nvar _gridFilterSelector = require(\"./gridFilterSelector\");\nvar _useFirstRender = require(\"../../utils/useFirstRender\");\nvar _rows = require(\"../rows\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _gridFilterUtils = require(\"./gridFilterUtils\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nconst filterStateInitializer = (state, props, apiRef) => {\n  const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? (0, _gridFilterState.getDefaultGridFilterModel)();\n  return (0, _extends2.default)({}, state, {\n    filter: (0, _extends2.default)({\n      filterModel: (0, _gridFilterUtils.sanitizeFilterModel)(filterModel, props.disableMultipleColumnsFiltering, apiRef)\n    }, _gridFilterState.defaultGridFilterLookup),\n    visibleRowsLookup: {}\n  });\n};\nexports.filterStateInitializer = filterStateInitializer;\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\nfunction createMemoizedValues() {\n  return (0, _reselect.lruMemoize)(Object.values);\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nconst useGridFilter = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: _gridFilterSelector.gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n      const filterState = apiRef.current.getFilterState(filterModel);\n      const newState = (0, _extends2.default)({}, state, {\n        filter: (0, _extends2.default)({}, state.filter, filterState)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return (0, _extends2.default)({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = column.filterOperators?.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [(0, _gridFilterUtils.cleanFilterItem)({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, (0, _gridFilterUtils.cleanFilterItem)({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(_gridPreferencePanelsValue.GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if ((0, _isDeepEqual.isDeepEqual)(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', (0, _gridFilterUtils.mergeStateWithFilterModel)(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = (0, _gridFilterUtils.sanitizeFilterModel)(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? (0, _gridFilterUtils.buildAggregatedFilterApplier)(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel ?? (0, _gridFilterState.getDefaultGridFilterModel)()\n    });\n    return (0, _extends2.default)({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: updateFilteredRows,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const filterModelToExport = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n\n    // Remove the additional `fromInput` property from the filter model\n    filterModelToExport.items.forEach(item => {\n      delete item.fromInput;\n    });\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.filter?.filterModel != null ||\n    // Export if the model is not equal to the default value\n    !(0, _isDeepEqual.isDeepEqual)(filterModelToExport, (0, _gridFilterState.getDefaultGridFilterModel)());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, props.initialState?.filter?.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const filterModel = context.stateToRestore.filter?.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', (0, _gridFilterUtils.mergeStateWithFilterModel)(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return (0, _extends2.default)({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === _gridPreferencePanelsValue.GridPreferencePanelsValue.filters) {\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(FilterPanel, (0, _extends2.default)({}, props.slotProps?.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, props.slotProps?.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = (0, _useLazyRef.useLazyRef)(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters || !params.filterModel.items.length && !params.filterModel.quickFilterValues?.length) {\n      return _gridFilterState.defaultGridFilterLookup;\n    }\n    const dataRowIdToModelLookup = (0, _rows.gridRowsLookupSelector)(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = (0, _gridFilterUtils.passFilterLogic)([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      if (!isRowPassing) {\n        filteredRowsLookup[id] = isRowPassing;\n      }\n    }\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n    return {\n      filteredRowsLookup,\n      filteredChildrenCountLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'columnMenu', addColumnMenuItem);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    const columnsLookup = (0, _gridColumnsSelector.gridColumnLookupSelector)(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel((0, _extends2.default)({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return (0, _extends2.default)({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n  }, [apiRef]);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowsSet', updateFilteredRows);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnsChange', handleColumnsChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  (0, _useGridEvent.useGridEvent)(apiRef, 'columnVisibilityModelChange', () => {\n    const filterModel = (0, _gridFilterSelector.gridFilterModelSelector)(apiRef);\n    if (filterModel.quickFilterValues && (0, _gridFilterUtils.shouldQuickFilterExcludeHiddenColumns)(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      apiRef.current.unstable_applyFilters();\n    }\n  });\n\n  /**\n   * 1ST RENDER\n   */\n  (0, _useFirstRender.useFirstRender)(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  (0, _utils.unstable_useEnhancedEffect)(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};\nexports.useGridFilter = useGridFilter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}