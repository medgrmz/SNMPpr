{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowsPreProcessors = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nconst createFlatRowTree = rows => {\n  const tree = {\n    [_gridRowsUtils.GRID_ROOT_GROUP_ID]: (0, _extends2.default)({}, (0, _gridRowsUtils.buildRootGroup)(), {\n      children: rows\n    })\n  };\n  for (let i = 0; i < rows.length; i += 1) {\n    const rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n  return {\n    groupingName: _strategyProcessing.GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\nconst updateFlatRowTree = ({\n  previousTree,\n  actions\n}) => {\n  const tree = (0, _extends2.default)({}, previousTree);\n  const idsToRemoveFromRootGroup = {};\n  for (let i = 0; i < actions.remove.length; i += 1) {\n    const idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n  for (let i = 0; i < actions.insert.length; i += 1) {\n    const idToInsert = actions.insert[i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  // TODO rows v6: Support row unpinning\n\n  const rootGroup = tree[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n  let rootGroupChildren = [...rootGroup.children, ...actions.insert];\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id]);\n  }\n  tree[_gridRowsUtils.GRID_ROOT_GROUP_ID] = (0, _extends2.default)({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: _strategyProcessing.GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\nconst flatRowTreeCreationMethod = params => {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\nconst useGridRowsPreProcessors = apiRef => {\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};\nexports.useGridRowsPreProcessors = useGridRowsPreProcessors;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","useGridRowsPreProcessors","_extends2","_strategyProcessing","_gridRowsUtils","createFlatRowTree","rows","tree","GRID_ROOT_GROUP_ID","buildRootGroup","children","i","length","rowId","id","depth","parent","type","groupingKey","groupingName","GRID_DEFAULT_STRATEGY","treeDepths","dataRowIds","updateFlatRowTree","previousTree","actions","idsToRemoveFromRootGroup","remove","idToDelete","insert","idToInsert","rootGroup","rootGroupChildren","values","filter","flatRowTreeCreationMethod","params","updates","apiRef","useGridRegisterStrategyProcessor"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridRowsPreProcessors = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _strategyProcessing = require(\"../../core/strategyProcessing\");\nvar _gridRowsUtils = require(\"./gridRowsUtils\");\nconst createFlatRowTree = rows => {\n  const tree = {\n    [_gridRowsUtils.GRID_ROOT_GROUP_ID]: (0, _extends2.default)({}, (0, _gridRowsUtils.buildRootGroup)(), {\n      children: rows\n    })\n  };\n  for (let i = 0; i < rows.length; i += 1) {\n    const rowId = rows[i];\n    tree[rowId] = {\n      id: rowId,\n      depth: 0,\n      parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n  return {\n    groupingName: _strategyProcessing.GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rows.length\n    },\n    dataRowIds: rows\n  };\n};\nconst updateFlatRowTree = ({\n  previousTree,\n  actions\n}) => {\n  const tree = (0, _extends2.default)({}, previousTree);\n  const idsToRemoveFromRootGroup = {};\n  for (let i = 0; i < actions.remove.length; i += 1) {\n    const idToDelete = actions.remove[i];\n    idsToRemoveFromRootGroup[idToDelete] = true;\n    delete tree[idToDelete];\n  }\n  for (let i = 0; i < actions.insert.length; i += 1) {\n    const idToInsert = actions.insert[i];\n    tree[idToInsert] = {\n      id: idToInsert,\n      depth: 0,\n      parent: _gridRowsUtils.GRID_ROOT_GROUP_ID,\n      type: 'leaf',\n      groupingKey: null\n    };\n  }\n\n  // TODO rows v6: Support row unpinning\n\n  const rootGroup = tree[_gridRowsUtils.GRID_ROOT_GROUP_ID];\n  let rootGroupChildren = [...rootGroup.children, ...actions.insert];\n  if (Object.values(idsToRemoveFromRootGroup).length) {\n    rootGroupChildren = rootGroupChildren.filter(id => !idsToRemoveFromRootGroup[id]);\n  }\n  tree[_gridRowsUtils.GRID_ROOT_GROUP_ID] = (0, _extends2.default)({}, rootGroup, {\n    children: rootGroupChildren\n  });\n  return {\n    groupingName: _strategyProcessing.GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepths: {\n      0: rootGroupChildren.length\n    },\n    dataRowIds: rootGroupChildren\n  };\n};\nconst flatRowTreeCreationMethod = params => {\n  if (params.updates.type === 'full') {\n    return createFlatRowTree(params.updates.rows);\n  }\n  return updateFlatRowTree({\n    previousTree: params.previousTree,\n    actions: params.updates.actions\n  });\n};\nconst useGridRowsPreProcessors = apiRef => {\n  (0, _strategyProcessing.useGridRegisterStrategyProcessor)(apiRef, _strategyProcessing.GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};\nexports.useGridRowsPreProcessors = useGridRowsPreProcessors;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}