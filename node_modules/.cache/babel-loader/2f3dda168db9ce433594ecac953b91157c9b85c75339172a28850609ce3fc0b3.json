{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCellEditing = void 0;\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridEditingSelectors = require(\"./gridEditingSelectors\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _utils = require(\"../../../utils/utils\");\nvar _gridEditCellParams = require(\"../../../models/params/gridEditCellParams\");\nvar _utils2 = require(\"./utils\");\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nconst useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === _gridEditRowModel.GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === _gridEditRowModel.GridCellModes.Edit) {\n      return;\n    }\n    const newParams = (0, _extends2.default)({}, params, {\n      reason: _gridEditCellParams.GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === _gridEditRowModel.GridCellModes.View) {\n      return;\n    }\n    const newParams = (0, _extends2.default)({}, params, {\n      reason: _gridEditCellParams.GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = _gridEditCellParams.GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridEditCellParams.GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? _gridEditCellParams.GridCellEditStopReasons.shiftTabKeyDown : _gridEditCellParams.GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = (0, _extends2.default)({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if ((0, _keyboardUtils.isPrintableKey)(event)) {\n        reason = _gridEditCellParams.GridCellEditStartReasons.printableKeyDown;\n      } else if ((0, _keyboardUtils.isPasteShortcut)(event)) {\n        reason = _gridEditCellParams.GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridEditCellParams.GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = _gridEditCellParams.GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = (0, _extends2.default)({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === _gridEditCellParams.GridCellEditStartReasons.printableKeyDown || reason === _gridEditCellParams.GridCellEditStartReasons.deleteKeyDown || reason === _gridEditCellParams.GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === _gridEditCellParams.GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === _gridEditCellParams.GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === _gridEditCellParams.GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'cellEditStart', props.onCellEditStart);\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? _gridEditRowModel.GridCellModes.Edit : _gridEditRowModel.GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = (0, _useEventCallback.default)(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = (0, _extends2.default)({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = (0, _extends2.default)({}, newModel[id], {\n        [field]: (0, _extends2.default)({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = (0, _objectWithoutPropertiesLoose2.default)(_newModel$id, [field].map(_toPropertyKey2.default)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = (0, _extends2.default)({}, newEditingState[id], {\n          [field]: (0, _extends2.default)({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.View);\n    updateFieldInCellModesModel(id, field, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = (0, _utils2.getDefaultCellValue)(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === _gridEditRowModel.GridCellModes.Edit) {\n        const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n        updateOrDeleteFieldState(id, field, (0, _extends2.default)({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded2);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: _gridEditRowModel.GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (props.dataSource?.updateRow) {\n      if ((0, _isDeepEqual.isDeepEqual)(row, rowUpdate)) {\n        finishCellEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: _gridEditRowModel.GridCellModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishCellEditMode();\n      } catch {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: _gridEditRowModel.GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    let newProps = (0, _extends2.default)({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = (0, _extends2.default)({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === _gridEditRowModel.GridCellModes.View) {\n      return false;\n    }\n    editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    newProps = (0, _extends2.default)({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : (0, _extends2.default)({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  (0, _useEnhancedEffect.default)(() => {\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = (0, _utils.deepClone)(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || _gridEditRowModel.GridCellModes.View;\n        const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n        if (params.mode === _gridEditRowModel.GridCellModes.Edit && prevMode === _gridEditRowModel.GridCellModes.View) {\n          updateStateToStartCellEditMode((0, _extends2.default)({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === _gridEditRowModel.GridCellModes.View && prevMode === _gridEditRowModel.GridCellModes.Edit) {\n          updateStateToStopCellEditMode((0, _extends2.default)({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};\nexports.useGridCellEditing = useGridCellEditing;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","Object","defineProperty","exports","value","useGridCellEditing","_objectWithoutPropertiesLoose2","_toPropertyKey2","_extends2","React","_warning","_useEventCallback","_useEnhancedEffect","_isDeepEqual","_useGridEvent","_gridEditRowModel","_useGridApiMethod","_gridEditingSelectors","_keyboardUtils","_gridRowsSelector","_utils","_gridEditCellParams","_utils2","_excluded","_excluded2","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","args","editMode","GridEditModes","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","GridCellModes","Edit","newParams","reason","GridCellEditStartReasons","cellDoubleClick","publishEvent","handleCellFocusOut","View","GridCellEditStopReasons","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","isPrintableKey","printableKeyDown","isPasteShortcut","pasteKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","runIfNoFieldErrors","editRowsState","state","editRows","hasFieldErrors","error","useGridEvent","useGridEventPriority","onCellEditStart","onCellEditStop","editingState","gridEditRowsStateSelector","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","api","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","keys","length","updateOrDeleteFieldState","setState","newEditingState","other","updateStateToStartCellEditMode","initialValue","getCellValue","newValue","getDefaultCellValue","getColumn","column","shouldProcessEditCellProps","preProcessEditCellProps","isProcessingProps","setCellFocus","Promise","resolve","row","getRow","hasChanged","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","dataSource","updateRow","isDeepEqual","handleError","updateRowParams","rowId","updatedRow","previousRow","editRow","errorThrown","process","env","NODE_ENV","warnOnce","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","valueSetter","editingApi","editingPrivateApi","useGridApiMethod","useEffect","rowsLookup","gridRowsLookupSelector","copyOfPrevCellModes","deepClone","entries","forEach","fields","prevMode","originalId","getRowId"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridCellEditing = void 0;\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useEnhancedEffect = _interopRequireDefault(require(\"@mui/utils/useEnhancedEffect\"));\nvar _isDeepEqual = require(\"@mui/x-internals/isDeepEqual\");\nvar _useGridEvent = require(\"../../utils/useGridEvent\");\nvar _gridEditRowModel = require(\"../../../models/gridEditRowModel\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridEditingSelectors = require(\"./gridEditingSelectors\");\nvar _keyboardUtils = require(\"../../../utils/keyboardUtils\");\nvar _gridRowsSelector = require(\"../rows/gridRowsSelector\");\nvar _utils = require(\"../../../utils/utils\");\nvar _gridEditCellParams = require(\"../../../models/params/gridEditCellParams\");\nvar _utils2 = require(\"./utils\");\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nconst useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === _gridEditRowModel.GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === _gridEditRowModel.GridCellModes.Edit) {\n      return;\n    }\n    const newParams = (0, _extends2.default)({}, params, {\n      reason: _gridEditCellParams.GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === _gridEditRowModel.GridCellModes.View) {\n      return;\n    }\n    const newParams = (0, _extends2.default)({}, params, {\n      reason: _gridEditCellParams.GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === _gridEditRowModel.GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = _gridEditCellParams.GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridEditCellParams.GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? _gridEditCellParams.GridCellEditStopReasons.shiftTabKeyDown : _gridEditCellParams.GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = (0, _extends2.default)({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if ((0, _keyboardUtils.isPrintableKey)(event)) {\n        reason = _gridEditCellParams.GridCellEditStartReasons.printableKeyDown;\n      } else if ((0, _keyboardUtils.isPasteShortcut)(event)) {\n        reason = _gridEditCellParams.GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = _gridEditCellParams.GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = _gridEditCellParams.GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = (0, _extends2.default)({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === _gridEditCellParams.GridCellEditStartReasons.printableKeyDown || reason === _gridEditCellParams.GridCellEditStartReasons.deleteKeyDown || reason === _gridEditCellParams.GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === _gridEditCellParams.GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === _gridEditCellParams.GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === _gridEditCellParams.GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  (0, _useGridEvent.useGridEvent)(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'cellEditStart', props.onCellEditStart);\n  (0, _useGridEvent.useGridEventPriority)(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? _gridEditRowModel.GridCellModes.Edit : _gridEditRowModel.GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = (0, _useEventCallback.default)(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = (0, _extends2.default)({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = (0, _extends2.default)({}, newModel[id], {\n        [field]: (0, _extends2.default)({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = (0, _objectWithoutPropertiesLoose2.default)(_newModel$id, [field].map(_toPropertyKey2.default)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = (0, _extends2.default)({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = (0, _extends2.default)({}, newEditingState[id], {\n          [field]: (0, _extends2.default)({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return (0, _extends2.default)({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.View);\n    updateFieldInCellModesModel(id, field, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = (0, _utils2.getDefaultCellValue)(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === _gridEditRowModel.GridCellModes.Edit) {\n        const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n        updateOrDeleteFieldState(id, field, (0, _extends2.default)({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = (0, _objectWithoutPropertiesLoose2.default)(params, _excluded2);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, (0, _extends2.default)({\n      mode: _gridEditRowModel.GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = (0, _useEventCallback.default)(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: _gridEditRowModel.GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (props.dataSource?.updateRow) {\n      if ((0, _isDeepEqual.isDeepEqual)(row, rowUpdate)) {\n        finishCellEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: _gridEditRowModel.GridCellModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishCellEditMode();\n      } catch {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = _gridEditRowModel.GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: _gridEditRowModel.GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          (0, _warning.warnOnce)(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, _gridEditRowModel.GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    let newProps = (0, _extends2.default)({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = (0, _extends2.default)({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === _gridEditRowModel.GridCellModes.View) {\n      return false;\n    }\n    editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    newProps = (0, _extends2.default)({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = (0, _gridEditingSelectors.gridEditRowsStateSelector)(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : (0, _extends2.default)({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingApi, 'public');\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  (0, _useEnhancedEffect.default)(() => {\n    const rowsLookup = (0, _gridRowsSelector.gridRowsLookupSelector)(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = (0, _utils.deepClone)(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || _gridEditRowModel.GridCellModes.View;\n        const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n        if (params.mode === _gridEditRowModel.GridCellModes.Edit && prevMode === _gridEditRowModel.GridCellModes.View) {\n          updateStateToStartCellEditMode((0, _extends2.default)({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === _gridEditRowModel.GridCellModes.View && prevMode === _gridEditRowModel.GridCellModes.Edit) {\n          updateStateToStopCellEditMode((0, _extends2.default)({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};\nexports.useGridCellEditing = useGridCellEditing;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}