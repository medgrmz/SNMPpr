{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPreferencesPanel = exports.preferencePanelStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridPreferencePanelSelector = require(\"./gridPreferencePanelSelector\");\nconst preferencePanelStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  preferencePanel: props.initialState?.preferencePanel ?? {\n    open: false\n  }\n});\n\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexports.preferencePanelStateInitializer = preferencePanelStateInitializer;\nconst useGridPreferencesPanel = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridPreferencesPanel');\n\n  /**\n   * API METHODS\n   */\n  const hidePreferences = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (!state.preferencePanel.open) {\n        return state;\n      }\n      logger.debug('Hiding Preferences Panel');\n      const preferencePanelState = (0, _gridPreferencePanelSelector.gridPreferencePanelStateSelector)(apiRef);\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n      return (0, _extends2.default)({}, state, {\n        preferencePanel: {\n          open: false\n        }\n      });\n    });\n  }, [apiRef, logger]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      preferencePanel: (0, _extends2.default)({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n  }, [logger, apiRef]);\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, {\n    showPreferences,\n    hidePreferences\n  }, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const preferencePanelToExport = (0, _gridPreferencePanelSelector.gridPreferencePanelStateSelector)(apiRef);\n    const shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    props.initialState?.preferencePanel != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, props.initialState?.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        preferencePanel\n      }));\n    }\n    return params;\n  }, [apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n};\nexports.useGridPreferencesPanel = useGridPreferencesPanel;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridPreferencesPanel","preferencePanelStateInitializer","_extends2","React","_useGridApiMethod","_useGridLogger","_pipeProcessing","_gridPreferencePanelSelector","state","props","preferencePanel","initialState","open","apiRef","logger","useGridLogger","hidePreferences","useCallback","current","setState","debug","preferencePanelState","gridPreferencePanelStateSelector","publishEvent","openedPanelValue","showPreferences","newValue","panelId","labelId","useGridApiMethod","stateExportPreProcessing","prevState","context","preferencePanelToExport","shouldExportPreferencePanel","exportOnlyDirtyModels","stateRestorePreProcessing","params","stateToRestore","useGridRegisterPipeProcessor"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPreferencesPanel = exports.preferencePanelStateInitializer = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _gridPreferencePanelSelector = require(\"./gridPreferencePanelSelector\");\nconst preferencePanelStateInitializer = (state, props) => (0, _extends2.default)({}, state, {\n  preferencePanel: props.initialState?.preferencePanel ?? {\n    open: false\n  }\n});\n\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexports.preferencePanelStateInitializer = preferencePanelStateInitializer;\nconst useGridPreferencesPanel = (apiRef, props) => {\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridPreferencesPanel');\n\n  /**\n   * API METHODS\n   */\n  const hidePreferences = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (!state.preferencePanel.open) {\n        return state;\n      }\n      logger.debug('Hiding Preferences Panel');\n      const preferencePanelState = (0, _gridPreferencePanelSelector.gridPreferencePanelStateSelector)(apiRef);\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n      return (0, _extends2.default)({}, state, {\n        preferencePanel: {\n          open: false\n        }\n      });\n    });\n  }, [apiRef, logger]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      preferencePanel: (0, _extends2.default)({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n  }, [logger, apiRef]);\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, {\n    showPreferences,\n    hidePreferences\n  }, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const preferencePanelToExport = (0, _gridPreferencePanelSelector.gridPreferencePanelStateSelector)(apiRef);\n    const shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    props.initialState?.preferencePanel != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return (0, _extends2.default)({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, props.initialState?.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        preferencePanel\n      }));\n    }\n    return params;\n  }, [apiRef]);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportState', stateExportPreProcessing);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'restoreState', stateRestorePreProcessing);\n};\nexports.useGridPreferencesPanel = useGridPreferencesPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}