{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findNonRowSpannedCell = findNonRowSpannedCell;\nexports.getRightColumnIndex = exports.getLeftColumnIndex = void 0;\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridRowSpanningSelectors = require(\"../rows/gridRowSpanningSelectors\");\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  isRtl\n}) => {\n  if (isRtl) {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (!isRtl) {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nexports.getLeftColumnIndex = getLeftColumnIndex;\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  isRtl\n}) => {\n  if (isRtl) {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (!isRtl) {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\nexports.getRightColumnIndex = getRightColumnIndex;\nfunction findNonRowSpannedCell(apiRef, rowId, field, rowSpanScanDirection) {\n  const rowSpanHiddenCells = (0, _gridRowSpanningSelectors.gridRowSpanningHiddenCellsSelector)(apiRef);\n  if (!rowSpanHiddenCells[rowId]?.[field]) {\n    return rowId;\n  }\n  const filteredSortedRowIds = (0, _gridFilterSelector.gridFilteredSortedRowIdsSelector)(apiRef);\n  // find closest non row spanned cell in the given `rowSpanScanDirection`\n  let nextRowIndex = filteredSortedRowIds.indexOf(rowId) + (rowSpanScanDirection === 'down' ? 1 : -1);\n  while (nextRowIndex >= 0 && nextRowIndex < filteredSortedRowIds.length) {\n    const nextRowId = filteredSortedRowIds[nextRowIndex];\n    if (!rowSpanHiddenCells[nextRowId]?.[field]) {\n      return nextRowId;\n    }\n    nextRowIndex += rowSpanScanDirection === 'down' ? 1 : -1;\n  }\n  return rowId;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","findNonRowSpannedCell","getRightColumnIndex","getLeftColumnIndex","_gridFilterSelector","require","_gridRowSpanningSelectors","currentColIndex","firstColIndex","lastColIndex","isRtl","apiRef","rowId","field","rowSpanScanDirection","rowSpanHiddenCells","gridRowSpanningHiddenCellsSelector","filteredSortedRowIds","gridFilteredSortedRowIdsSelector","nextRowIndex","indexOf","length","nextRowId"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findNonRowSpannedCell = findNonRowSpannedCell;\nexports.getRightColumnIndex = exports.getLeftColumnIndex = void 0;\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridRowSpanningSelectors = require(\"../rows/gridRowSpanningSelectors\");\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  isRtl\n}) => {\n  if (isRtl) {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (!isRtl) {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nexports.getLeftColumnIndex = getLeftColumnIndex;\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  isRtl\n}) => {\n  if (isRtl) {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (!isRtl) {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\nexports.getRightColumnIndex = getRightColumnIndex;\nfunction findNonRowSpannedCell(apiRef, rowId, field, rowSpanScanDirection) {\n  const rowSpanHiddenCells = (0, _gridRowSpanningSelectors.gridRowSpanningHiddenCellsSelector)(apiRef);\n  if (!rowSpanHiddenCells[rowId]?.[field]) {\n    return rowId;\n  }\n  const filteredSortedRowIds = (0, _gridFilterSelector.gridFilteredSortedRowIdsSelector)(apiRef);\n  // find closest non row spanned cell in the given `rowSpanScanDirection`\n  let nextRowIndex = filteredSortedRowIds.indexOf(rowId) + (rowSpanScanDirection === 'down' ? 1 : -1);\n  while (nextRowIndex >= 0 && nextRowIndex < filteredSortedRowIds.length) {\n    const nextRowId = filteredSortedRowIds[nextRowIndex];\n    if (!rowSpanHiddenCells[nextRowId]?.[field]) {\n      return nextRowId;\n    }\n    nextRowIndex += rowSpanScanDirection === 'down' ? 1 : -1;\n  }\n  return rowId;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB;AACrDF,OAAO,CAACG,mBAAmB,GAAGH,OAAO,CAACI,kBAAkB,GAAG,KAAK,CAAC;AACjE,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AACjE,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC3E,MAAMF,kBAAkB,GAAGA,CAAC;EAC1BI,eAAe;EACfC,aAAa;EACbC,YAAY;EACZC;AACF,CAAC,KAAK;EACJ,IAAIA,KAAK,EAAE;IACT,IAAIH,eAAe,GAAGE,YAAY,EAAE;MAClC,OAAOF,eAAe,GAAG,CAAC;IAC5B;EACF,CAAC,MAAM,IAAI,CAACG,KAAK,EAAE;IACjB,IAAIH,eAAe,GAAGC,aAAa,EAAE;MACnC,OAAOD,eAAe,GAAG,CAAC;IAC5B;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACDR,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAC/C,MAAMD,mBAAmB,GAAGA,CAAC;EAC3BK,eAAe;EACfC,aAAa;EACbC,YAAY;EACZC;AACF,CAAC,KAAK;EACJ,IAAIA,KAAK,EAAE;IACT,IAAIH,eAAe,GAAGC,aAAa,EAAE;MACnC,OAAOD,eAAe,GAAG,CAAC;IAC5B;EACF,CAAC,MAAM,IAAI,CAACG,KAAK,EAAE;IACjB,IAAIH,eAAe,GAAGE,YAAY,EAAE;MAClC,OAAOF,eAAe,GAAG,CAAC;IAC5B;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACDR,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,SAASD,qBAAqBA,CAACU,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,oBAAoB,EAAE;EACzE,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAET,yBAAyB,CAACU,kCAAkC,EAAEL,MAAM,CAAC;EACpG,IAAI,CAACI,kBAAkB,CAACH,KAAK,CAAC,GAAGC,KAAK,CAAC,EAAE;IACvC,OAAOD,KAAK;EACd;EACA,MAAMK,oBAAoB,GAAG,CAAC,CAAC,EAAEb,mBAAmB,CAACc,gCAAgC,EAAEP,MAAM,CAAC;EAC9F;EACA,IAAIQ,YAAY,GAAGF,oBAAoB,CAACG,OAAO,CAACR,KAAK,CAAC,IAAIE,oBAAoB,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACnG,OAAOK,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAGF,oBAAoB,CAACI,MAAM,EAAE;IACtE,MAAMC,SAAS,GAAGL,oBAAoB,CAACE,YAAY,CAAC;IACpD,IAAI,CAACJ,kBAAkB,CAACO,SAAS,CAAC,GAAGT,KAAK,CAAC,EAAE;MAC3C,OAAOS,SAAS;IAClB;IACAH,YAAY,IAAIL,oBAAoB,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1D;EACA,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}