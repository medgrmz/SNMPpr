{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPrintExport = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/utils\");\nvar _export = require(\"@mui/x-internals/export\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridRowsMetaSelector = require(\"../rows/gridRowsMetaSelector\");\nvar _gridRowsUtils = require(\"../rows/gridRowsUtils\");\nvar _utils2 = require(\"./utils\");\nvar _useGridPaginationModel = require(\"../pagination/useGridPaginationModel\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _toolbar = require(\"../../../components/toolbar\");\nvar _gridColumnsUtils = require(\"../columns/gridColumnsUtils\");\nvar _gridCheckboxSelectionColDef = require(\"../../../colDef/gridCheckboxSelectionColDef\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nconst useGridPrintExport = (apiRef, props) => {\n  const hasRootReference = apiRef.current.rootElementRef.current !== null;\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  const previousVirtualizationState = React.useRef(null);\n  React.useEffect(() => {\n    doc.current = (0, _utils.unstable_ownerDocument)(apiRef.current.rootElementRef.current);\n  }, [apiRef, hasRootReference]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = (0, _utils2.getColumnsToExport)({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[_gridCheckboxSelectionColDef.GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.reduce((acc, id) => {\n      const row = apiRef.current.getRow(id);\n      if (!row[_gridRowsUtils.GRID_ID_AUTOGENERATED]) {\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    const normalizeOptions = (0, _extends2.default)({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = (0, _gridRowsMetaSelector.gridRowsMetaSelector)(apiRef);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(`.${_gridClasses.gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    let gridToolbarElementHeight = gridRootElement.querySelector(`.${_gridClasses.gridClasses.toolbarContainer}`)?.offsetHeight || 0;\n    let gridFooterElementHeight = gridRootElement.querySelector(`.${_gridClasses.gridClasses.footerContainer}`)?.offsetHeight || 0;\n    const gridFooterElement = gridClone.querySelector(`.${_gridClasses.gridClasses.footerContainer}`);\n    if (normalizeOptions.hideToolbar) {\n      gridClone.querySelector(`.${_gridClasses.gridClasses.toolbarContainer}`)?.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter && gridFooterElement) {\n      gridFooterElement.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + (0, _gridColumnsUtils.getTotalHeaderHeight)(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = `${computedTotalHeight}px`;\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n    if (!normalizeOptions.hideFooter && gridFooterElement) {\n      // the footer is always being placed at the bottom of the page as if all rows are exported\n      // so if getRowsToExport is being used to only export a subset of rows then we need to\n      // adjust the footer position to be correctly placed at the bottom of the grid\n      gridFooterElement.style.position = 'absolute';\n      gridFooterElement.style.width = '100%';\n      gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;\n    }\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    // To avoid an empty page in start on Chromium based browsers\n    printDoc.body.style.marginTop = '0px';\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    let stylesheetLoadPromises = [];\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      stylesheetLoadPromises = (0, _export.loadStyleSheets)(printDoc, root);\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!previousGridState.current?.columns?.columnVisibilityModel) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      virtualization: previousVirtualizationState.current\n    }));\n    apiRef.current.setRows(previousRows.current);\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI X: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    previousRows.current = apiRef.current.getSortedRows().filter(row => !row[_gridRowsUtils.GRID_ID_AUTOGENERATED]);\n    if (props.pagination) {\n      const visibleRowCount = (0, _gridFilterSelector.gridExpandedRowCountSelector)(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        pagination: (0, _extends2.default)({}, state.pagination, {\n          paginationModel: (0, _useGridPaginationModel.getDerivedPaginationModel)(state.pagination,\n          // Using signature `DataGridPro` to allow more than 100 rows in the print export\n          'DataGridPro', paginationModel)\n        })\n      }));\n    }\n    previousVirtualizationState.current = apiRef.current.state.virtualization;\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      virtualization: (0, _extends2.default)({}, state.virtualization, {\n        enabled: false,\n        enabledForColumns: false\n      })\n    }));\n    await updateGridColumnsForPrint(options?.fields, options?.allColumns, options?.includeCheckboxes);\n    updateGridRowsForPrint(options?.getRowsToExport ?? _utils2.defaultGetRowsToExport);\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options?.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.printOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/(0, _jsxRuntime.jsx)(_toolbar.GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportMenu', addExportMenuButtons);\n};\nexports.useGridPrintExport = useGridPrintExport;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useGridPrintExport","_extends2","React","_utils","_export","_useGridLogger","_gridFilterSelector","_gridColumnsSelector","_gridClasses","_useGridApiMethod","_gridRowsMetaSelector","_gridRowsUtils","_utils2","_useGridPaginationModel","_pipeProcessing","_toolbar","_gridColumnsUtils","_gridCheckboxSelectionColDef","_jsxRuntime","raf","Promise","resolve","requestAnimationFrame","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","apiRef","props","hasRootReference","current","rootElementRef","logger","useGridLogger","doc","useRef","previousGridState","previousColumnVisibility","previousRows","previousVirtualizationState","useEffect","unstable_ownerDocument","updateGridColumnsForPrint","useCallback","fields","allColumns","includeCheckboxes","exportedColumnFields","getColumnsToExport","options","map","column","field","columns","gridColumnDefinitionsSelector","newColumnVisibilityModel","forEach","includes","GRID_CHECKBOX_SELECTION_COL_DEF","setColumnVisibilityModel","updateGridRowsForPrint","getRowsToExport","rowsToExportIds","newRows","reduce","acc","id","row","getRow","GRID_ID_AUTOGENERATED","push","setRows","handlePrintWindowLoad","printWindow","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","rowsMeta","gridRowsMetaSelector","gridRootElement","gridClone","cloneNode","gridMain","querySelector","gridClasses","main","overflow","contain","gridToolbarElementHeight","toolbarContainer","offsetHeight","gridFooterElementHeight","footerContainer","gridFooterElement","remove","computedTotalHeight","currentPageTotalHeight","getTotalHeaderHeight","boxSizing","top","container","appendChild","body","marginTop","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","stylesheetLoadPromises","rootCandidate","getRootNode","root","constructor","name","loadStyleSheets","process","env","NODE_ENV","all","then","contentWindow","print","handlePrintWindowAfterPrint","removeChild","restoreState","columnVisibilityModel","setState","state","virtualization","exportDataAsPrint","debug","Error","exportState","gridColumnVisibilityModelSelector","getSortedRows","filter","pagination","visibleRowCount","gridExpandedRowCountSelector","paginationModel","page","pageSize","getDerivedPaginationModel","enabled","enabledForColumns","defaultGetRowsToExport","fileName","onload","mediaQueryList","matchMedia","addEventListener","mql","isAfterPrint","matches","printExportApi","useGridApiMethod","addExportMenuButtons","initialValue","printOptions","disableToolbarButton","component","jsx","GridPrintExportMenuItem","componentName","useGridRegisterPipeProcessor"],"sources":["C:/Users/MSI GF75 THIN 10SC/OneDrive/Bureau/fffffffff/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGridPrintExport = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/utils\");\nvar _export = require(\"@mui/x-internals/export\");\nvar _useGridLogger = require(\"../../utils/useGridLogger\");\nvar _gridFilterSelector = require(\"../filter/gridFilterSelector\");\nvar _gridColumnsSelector = require(\"../columns/gridColumnsSelector\");\nvar _gridClasses = require(\"../../../constants/gridClasses\");\nvar _useGridApiMethod = require(\"../../utils/useGridApiMethod\");\nvar _gridRowsMetaSelector = require(\"../rows/gridRowsMetaSelector\");\nvar _gridRowsUtils = require(\"../rows/gridRowsUtils\");\nvar _utils2 = require(\"./utils\");\nvar _useGridPaginationModel = require(\"../pagination/useGridPaginationModel\");\nvar _pipeProcessing = require(\"../../core/pipeProcessing\");\nvar _toolbar = require(\"../../../components/toolbar\");\nvar _gridColumnsUtils = require(\"../columns/gridColumnsUtils\");\nvar _gridCheckboxSelectionColDef = require(\"../../../colDef/gridCheckboxSelectionColDef\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nconst useGridPrintExport = (apiRef, props) => {\n  const hasRootReference = apiRef.current.rootElementRef.current !== null;\n  const logger = (0, _useGridLogger.useGridLogger)(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  const previousVirtualizationState = React.useRef(null);\n  React.useEffect(() => {\n    doc.current = (0, _utils.unstable_ownerDocument)(apiRef.current.rootElementRef.current);\n  }, [apiRef, hasRootReference]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = (0, _utils2.getColumnsToExport)({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = (0, _gridColumnsSelector.gridColumnDefinitionsSelector)(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[_gridCheckboxSelectionColDef.GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.reduce((acc, id) => {\n      const row = apiRef.current.getRow(id);\n      if (!row[_gridRowsUtils.GRID_ID_AUTOGENERATED]) {\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    const normalizeOptions = (0, _extends2.default)({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = (0, _gridRowsMetaSelector.gridRowsMetaSelector)(apiRef);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(`.${_gridClasses.gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    let gridToolbarElementHeight = gridRootElement.querySelector(`.${_gridClasses.gridClasses.toolbarContainer}`)?.offsetHeight || 0;\n    let gridFooterElementHeight = gridRootElement.querySelector(`.${_gridClasses.gridClasses.footerContainer}`)?.offsetHeight || 0;\n    const gridFooterElement = gridClone.querySelector(`.${_gridClasses.gridClasses.footerContainer}`);\n    if (normalizeOptions.hideToolbar) {\n      gridClone.querySelector(`.${_gridClasses.gridClasses.toolbarContainer}`)?.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter && gridFooterElement) {\n      gridFooterElement.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + (0, _gridColumnsUtils.getTotalHeaderHeight)(apiRef, props) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = `${computedTotalHeight}px`;\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n    if (!normalizeOptions.hideFooter && gridFooterElement) {\n      // the footer is always being placed at the bottom of the page as if all rows are exported\n      // so if getRowsToExport is being used to only export a subset of rows then we need to\n      // adjust the footer position to be correctly placed at the bottom of the grid\n      gridFooterElement.style.position = 'absolute';\n      gridFooterElement.style.width = '100%';\n      gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;\n    }\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    // To avoid an empty page in start on Chromium based browsers\n    printDoc.body.style.marginTop = '0px';\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    let stylesheetLoadPromises = [];\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      stylesheetLoadPromises = (0, _export.loadStyleSheets)(printDoc, root);\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!previousGridState.current?.columns?.columnVisibilityModel) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      virtualization: previousVirtualizationState.current\n    }));\n    apiRef.current.setRows(previousRows.current);\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI X: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = (0, _gridColumnsSelector.gridColumnVisibilityModelSelector)(apiRef);\n    previousRows.current = apiRef.current.getSortedRows().filter(row => !row[_gridRowsUtils.GRID_ID_AUTOGENERATED]);\n    if (props.pagination) {\n      const visibleRowCount = (0, _gridFilterSelector.gridExpandedRowCountSelector)(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n        pagination: (0, _extends2.default)({}, state.pagination, {\n          paginationModel: (0, _useGridPaginationModel.getDerivedPaginationModel)(state.pagination,\n          // Using signature `DataGridPro` to allow more than 100 rows in the print export\n          'DataGridPro', paginationModel)\n        })\n      }));\n    }\n    previousVirtualizationState.current = apiRef.current.state.virtualization;\n    apiRef.current.setState(state => (0, _extends2.default)({}, state, {\n      virtualization: (0, _extends2.default)({}, state.virtualization, {\n        enabled: false,\n        enabledForColumns: false\n      })\n    }));\n    await updateGridColumnsForPrint(options?.fields, options?.allColumns, options?.includeCheckboxes);\n    updateGridRowsForPrint(options?.getRowsToExport ?? _utils2.defaultGetRowsToExport);\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options?.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  (0, _useGridApiMethod.useGridApiMethod)(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.printOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/(0, _jsxRuntime.jsx)(_toolbar.GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  (0, _pipeProcessing.useGridRegisterPipeProcessor)(apiRef, 'exportMenu', addExportMenuButtons);\n};\nexports.useGridPrintExport = useGridPrintExport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}